const fs = require('fs').promises;
const path = require('path');

module.exports.config = {
    name: "farm",
    version: "3.0.0",
    hasPermssion: 0,
    credits: "Gojo Satoru",
    description: "Tr·ªìng c√¢y, chƒÉn nu√¥i v√† n·∫•u ƒÉn",
    commandCategory: "Game",
    usages: "[trong/thuhoach/choan/nauan/info/kho/ban/level/bxh]",
    cooldowns: 5,
    envConfig: {
        cooldownTime: 300000
    }
};

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u d·ªØ li·ªáu
const DATA_FILE_PATH = path.join(__dirname, 'game', 'farmGameData.json');

// Khai b√°o bi·∫øn to√†n c·ª•c
let playerData = {};
let plantSchema = {};
let cooldowns = {};
let inventory = {};
let cookingActivities = {};

// ƒê·ªãnh nghƒ©a c√°c lo·∫°i c√¢y tr·ªìng
const CROPS = {
    "ot": { emoji: "üå∂Ô∏è", name: "·ªöt", growTime: 1200000, yield: [2, 6], price:2500, exp: 15 },
    "ngo": { emoji: "üåΩ", name: "Ng√¥", growTime: 1200000, yield: [2, 6], price: 2500, exp: 15 },
    "khoaitay": { emoji: "ü•î", name: "Khoai t√¢y", growTime: 1800000, yield: [2, 5], price: 5000, exp: 30 },
    "caingot": { emoji: "ü•¨", name: "C·∫£i ng·ªçt", growTime: 1800000, yield: [2, 5], price: 5000, exp: 30 },
    "dautay": { emoji: "üçì", name: "D√¢u t√¢y", growTime: 3600000, yield: [2, 4], price: 10000, exp: 50 },
    "lua_gao": { emoji: "üåæ", name: "L√∫a g·∫°o", growTime: 3600000, yield: [3, 6], price: 3000, exp: 20 },
    "hanh": { emoji: "üßÖ", name: "H√†nh", growTime: 1800000, yield: [2, 5], price: 2000, exp: 15 },
    "rau_xa_lach": { emoji: "ü•¨", name: "Rau x√† l√°ch", growTime: 2400000, yield: [2, 4], price: 2500, exp: 18 },
    "dua_chuot": { emoji: "ü•í", name: "D∆∞a chu·ªôt", growTime: 2700000, yield: [2, 5], price: 2800, exp: 20 },
    "ca_chua": { emoji: "üçÖ", name: "C√† chua", growTime: 3300000, yield: [2, 5], price: 3000, exp: 25 },
    "chuoi": { emoji: "üçå", name: "Chu·ªëi", growTime: 5400000, yield: [3, 6], price: 3500, exp: 28 },
    "dua_hau": { emoji: "üçâ", name: "D∆∞a h·∫•u", growTime: 7200000, yield: [1, 3], price: 10000, exp: 60 },
    "nho": { emoji: "üçá", name: "Nho", growTime: 6000000, yield: [2, 5], price: 8000, exp: 45 },
    "khoai_lang": { emoji: "üç†", name: "Khoai lang", growTime: 3000000, yield: [2, 4], price: 4000, exp: 25 },
    "dau_dua": { emoji: "ü••", name: "D·ª´a", growTime: 10800000, yield: [1, 2], price: 15000, exp: 75 }
};

// ƒê·ªãnh nghƒ©a c√°c lo·∫°i ƒë·ªông v·∫≠t
const ANIMALS = {
    "bo": { 
        emoji: "üêÑ", name: "B√≤", feedTime: 14400000, feedCost: 500, 
        products: {
            "sua": { name: "S·ªØa", emoji: "ü•õ", yield: [2, 4], price: 400 },
            "thit_bo": { name: "Th·ªãt b√≤", emoji: "ü•©", yield: [1, 2], price: 8000 }
        },
        exp: 60 
    },
    "ga": { 
        emoji: "üêî", name: "G√†", feedTime: 7200000, feedCost: 300, 
        products: {
            "trung": { name: "Tr·ª©ng", emoji: "ü•ö", yield: [2, 5], price: 200 },
            "thit_ga": { name: "Th·ªãt g√†", emoji: "üçó", yield: [1, 2], price: 5000 }
        },
        exp: 40 
    },
    "heo": { 
        emoji: "üê∑", name: "Heo", feedTime: 10800000, feedCost: 400, 
        products: {
            "thit_heo": { name: "Th·ªãt heo", emoji: "üçñ", yield: [2, 4], price: 6000 }
        },
        exp: 50 
    },
    "cuu": {
        emoji: "üêë", name: "C·ª´u", feedTime: 12600000, feedCost: 450,
        products: {
            "len": { name: "Len", emoji: "üß∂", yield: [1, 3], price: 700 },
            "thit_cuu": { name: "Th·ªãt c·ª´u", emoji: "üçñ", yield: [1, 2], price: 7500 }
        },
        exp: 55
    },
    "vit": {
        emoji: "ü¶Ü", name: "V·ªãt", feedTime: 9000000, feedCost: 350,
        products: {
            "trung_vit": { name: "Tr·ª©ng v·ªãt", emoji: "ü•ö", yield: [2, 4], price: 2500 },
            "thit_vit": { name: "Th·ªãt v·ªãt", emoji: "üçó", yield: [1, 2], price: 5500 }
        },
        exp: 45
    },
    "de": {
        emoji: "üêê", name: "D√™", feedTime: 13200000, feedCost: 475,
        products: {
            "sua_de": { name: "S·ªØa d√™", emoji: "ü•õ", yield: [2, 3], price: 4500 },
            "thit_de": { name: "Th·ªãt d√™", emoji: "üçñ", yield: [1, 2], price: 7000 }
        },
        exp: 58
    }
};

// ƒê·ªãnh nghƒ©a c√°c c√¥ng th·ª©c n·∫•u ƒÉn
const RECIPES = {
    "banh_mi": {
        name: "B√°nh m√¨",
        emoji: "ü•ñ",
        ingredients: { "lua_gao": 2, "trung": 1 },
        cookTime: 600000, // 10 ph√∫t
        price: 10000,
        exp: 50
    },
    "pho_bo": {
        name: "Ph·ªü b√≤",
        emoji: "üçú",
        ingredients: { "lua_gao": 2, "thit_bo": 1, "hanh": 1 },
        cookTime: 1800000, // 30 ph√∫t
        price: 20000,
        exp: 100
    },
    "com_ga": {
        name: "C∆°m g√†",
        emoji: "üçóüçö",
        ingredients: { "lua_gao": 1, "thit_ga": 1 },
        cookTime: 1200000, // 20 ph√∫t
        price: 15000,
        exp: 75
    },
    "salad": {
        name: "Salad",
        emoji: "ü•ó",
        ingredients: { "rau_xa_lach": 2, "ca_chua": 1, "dua_chuot": 1 },
        cookTime: 600000, // 10 ph√∫t
        price: 10000,
        exp: 50
    },
    "banh_xeo": {
        name: "B√°nh x√®o",
        emoji: "ü•û",
        ingredients: { "lua_gao": 1, "thit_heo": 1, "dau_dua": 1 },
        cookTime: 900000, // 15 ph√∫t
        price: 13000,
        exp: 65
    },
    "smoothie_trai_cay": {
        name: "Smoothie tr√°i c√¢y",
        emoji: "ü•§",
        ingredients: { "dautay": 2, "chuoi": 1, "sua": 1 },
        cookTime: 300000, // 5 ph√∫t
        price: 8000,
        exp: 40
    },
    "thit_kho_trung": {
        name: "Th·ªãt kho tr·ª©ng",
        emoji: "üç≤",
        ingredients: { "thit_heo": 1, "trung": 2, "dua_chuot": 1 },
        cookTime: 2400000, // 40 ph√∫t
        price: 18000,
        exp: 90
    },
    "ga_nuong": {
        name: "G√† n∆∞·ªõng",
        emoji: "üçó",
        ingredients: { "thit_ga": 1, "ot": 1, "hanh": 1 },
        cookTime: 1800000, // 30 ph√∫t
        price: 16000,
        exp: 80
    },
    "canh_chua": {
        name: "Canh chua",
        emoji: "ü•£",
        ingredients: { "ca_chua": 2, "dua_chuot": 1, "ngo": 1 },
        cookTime: 1500000, // 25 ph√∫t
        price: 12000,
        exp: 60
    },
    "trai_cay_dam": {
        name: "Tr√°i c√¢y d·∫ßm",
        emoji: "üç®",
        ingredients: { "dautay": 1, "nho": 1, "dua_hau": 1, "sua": 1 },
        cookTime: 600000, // 10 ph√∫t
        price: 11000,
        exp: 55
    }
};

// H√†m ƒë·ªÉ l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu game
async function saveAllData() {
    const gameData = {
        playerData,
        plantSchema,
        cooldowns,
        inventory,
        cookingActivities,
        lastResetDate: global.farmData.lastResetDate,
        lastUpdated: Date.now()
    };

    try {
        await fs.writeFile(DATA_FILE_PATH, JSON.stringify(gameData, null, 2));
        console.log('ƒê√£ l∆∞u d·ªØ li·ªáu game th√†nh c√¥ng.');
    } catch (error) {
        console.error('L·ªói khi l∆∞u d·ªØ li·ªáu game:', error);
    }
}

// H√†m ƒë·ªÉ t·∫£i t·∫•t c·∫£ d·ªØ li·ªáu game
async function loadAllData() {
    try {
        const data = await fs.readFile(DATA_FILE_PATH, 'utf8');
        const gameData = JSON.parse(data);

        playerData = gameData.playerData || {};
        plantSchema = gameData.plantSchema || {};
        cooldowns = gameData.cooldowns || {};
        inventory = gameData.inventory || {};
        cookingActivities = gameData.cookingActivities || {};
        global.farmData = { lastResetDate: gameData.lastResetDate };

        //console.log('ƒê√£ t·∫£i d·ªØ li·ªáu game th√†nh c√¥ng.');
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log('Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu. T·∫°o d·ªØ li·ªáu m·ªõi.');
            global.farmData = { lastResetDate: new Date().toDateString() };
        } else {
            console.error('L·ªói khi t·∫£i d·ªØ li·ªáu game:', error);
        }
    }
}

// Kh·ªüi t·∫°o d·ªØ li·ªáu khi kh·ªüi ƒë·ªông module
loadAllData();

// C√°c h√†m ti·ªán √≠ch
function formatTime(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    
    if (hours > 0) {
        return `${hours} gi·ªù ${minutes % 60} ph√∫t`;
    } else if (minutes > 0) {
        return `${minutes} ph√∫t`;
    } else {
        return `${seconds} gi√¢y`;
    }
}

function calculateLevel(exp) {
    return Math.floor(Math.sqrt(exp / 100)) + 1;
}
// H√†m tr·ªìng c√¢y
async function plantAllCrops(api, event, uid, Currencies) {
    if (!playerData[uid]) {
        playerData[uid] = { exp: 0, level: 1 };
    }
    
    const userMoney = await Currencies.getData(uid);
    let totalCost = 0;
    let cropsToPlant = [];

    for (let cropName in CROPS) {
        if (!plantSchema[uid] || !plantSchema[uid][cropName]) {
            if (userMoney.money >= CROPS[cropName].price + totalCost) {
                cropsToPlant.push(cropName);
                totalCost += CROPS[cropName].price;
            }
        }
    }

    if (cropsToPlant.length === 0) {
        return api.sendMessage(`üí∞ B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ tr·ªìng th√™m c√¢y n√†o.`, event.threadID);
    }

    await Currencies.decreaseMoney(uid, totalCost);
    if (!plantSchema[uid]) plantSchema[uid] = {};

    let plantedMessage = `üå± ƒê√£ tr·ªìng th√†nh c√¥ng ${cropsToPlant.length} lo·∫°i c√¢y:\n\n`;
    for (let crop of cropsToPlant) {
        plantSchema[uid][crop] = { 
            plantedTime: Date.now(),
            growTime: CROPS[crop].growTime
        };
        const [minYield, maxYield] = CROPS[crop].yield;
        const avgYield = (minYield + maxYield) / 2;
        const adjustedExp = Math.floor(CROPS[crop].exp * avgYield);
        plantedMessage += `${CROPS[crop].emoji} ${CROPS[crop].name} (S·∫£n l∆∞·ª£ng: ${minYield} - ${maxYield}, EXP: ${adjustedExp})\n`;
    }

    plantedMessage += `\nüí∞ T·ªïng chi ph√≠: ${totalCost.toLocaleString()} VND`;
    plantedMessage += `\n‚è≥ Ki·ªÉm tra th·ªùi gian thu ho·∫°ch b·∫±ng l·ªánh 'farm info'`;

    await saveAllData();
    api.sendMessage(plantedMessage, event.threadID);
}

// H√†m thu ho·∫°ch
async function harvestAllCrops(api, event, uid) {
    if (!plantSchema[uid]) {
        return api.sendMessage("B·∫°n ch∆∞a tr·ªìng c√¢y n√†o c·∫£!", event.threadID);
    }

    let harvestedCrops = [];
    let totalExp = 0;

    for (let cropName in plantSchema[uid]) {
        if (CROPS[cropName]) {
            const crop = plantSchema[uid][cropName];
            let growTime = crop.growTime;

            if (Date.now() - crop.plantedTime >= growTime) {
                if (!inventory[uid]) inventory[uid] = {};
                if (!inventory[uid][cropName]) inventory[uid][cropName] = 0;

                const [minYield, maxYield] = CROPS[cropName].yield;
                const randomYield = Math.floor(Math.random() * (maxYield - minYield + 1)) + minYield;
                inventory[uid][cropName] += randomYield;

                const expGain = CROPS[cropName].exp * randomYield;
                totalExp += expGain;

                harvestedCrops.push(`${CROPS[cropName].emoji} ${CROPS[cropName].name}: ${randomYield}`);
                delete plantSchema[uid][cropName];
            }
        }
    }

    if (harvestedCrops.length === 0) {
        return api.sendMessage("Kh√¥ng c√≥ c√¢y n√†o s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch!", event.threadID);
    }

    const levelUpMessage = updateExpAndLevel(uid, totalExp);

    let message = `
üéâ Thu ho·∫°ch th√†nh c√¥ng!
${harvestedCrops.join("\n")}

üìä EXP: ${totalExp}
    `;

    if (levelUpMessage) {
        message += `\n${levelUpMessage}`;
    }

    await saveAllData();
    api.sendMessage(message, event.threadID);
}

// H√†m cho ƒë·ªông v·∫≠t ƒÉn
async function feedAllAnimals(api, event, uid, Currencies) {
    if (!playerData[uid]) {
        playerData[uid] = { exp: 0, level: 1 };
    }

    const now = Date.now();
    let fedAnimals = [];
    let totalExp = 0;
    let totalFeedCost = 0;

    for (let animalName in ANIMALS) {
        if (!cooldowns[uid] || !cooldowns[uid][animalName] || now - cooldowns[uid][animalName] >= ANIMALS[animalName].feedTime) {
            const feedCost = ANIMALS[animalName].feedCost;
            totalFeedCost += feedCost;

            if (!cooldowns[uid]) cooldowns[uid] = {};
            cooldowns[uid][animalName] = now;
            if (!inventory[uid]) inventory[uid] = {};

            for (let productKey in ANIMALS[animalName].products) {
                const product = ANIMALS[animalName].products[productKey];
                const [minProduct, maxProduct] = product.yield;
                const randomProduct = Math.floor(Math.random() * (maxProduct - minProduct + 1)) + minProduct;

                if (!inventory[uid][productKey]) inventory[uid][productKey] = 0;
                inventory[uid][productKey] += randomProduct;

                fedAnimals.push(`${ANIMALS[animalName].emoji} ${ANIMALS[animalName].name}: ${randomProduct} ${product.name} ${product.emoji}`);
            }

            const expGain = ANIMALS[animalName].exp;
            totalExp += expGain;
        }
    }

    if (fedAnimals.length === 0) {
        return api.sendMessage("T·∫•t c·∫£ ƒë·ªông v·∫≠t ƒë√£ ƒë∆∞·ª£c cho ƒÉn!", event.threadID);
    }

    const userMoney = await Currencies.getData(uid);
    if (userMoney.money < totalFeedCost) {
        return api.sendMessage(`
üí∞ B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ cho t·∫•t c·∫£ ƒë·ªông v·∫≠t ƒÉn.
ü™ô Chi ph√≠: ${totalFeedCost.toLocaleString()} VND
üí∏ S·ªë d∆∞ c·ªßa b·∫°n: ${userMoney.money.toLocaleString()} VND
        `, event.threadID);
    }

    await Currencies.decreaseMoney(uid, totalFeedCost);
    const levelUpMessage = updateExpAndLevel(uid, totalExp);

    let message = `
üçΩÔ∏è Cho ƒÉn th√†nh c√¥ng!
${fedAnimals.join("\n")}

üí∞ T·ªïng chi ph√≠: ${totalFeedCost.toLocaleString()} VND
üìä EXP nh·∫≠n ƒë∆∞·ª£c: ${totalExp}
    `;

    if (levelUpMessage) {
        message += `\n${levelUpMessage}`;
    }

    await saveAllData();
    api.sendMessage(message, event.threadID);
}

// Th√™m log cho h√†m ki·ªÉm tra v√† ho√†n th√†nh n·∫•u ƒÉn
async function checkAndFinishCooking(uid) {
    console.log(`[COOKING] Checking cooking status for user ${uid}`);
    if (!cookingActivities[uid]) return [];

    const now = Date.now();
    let finishedRecipes = [];

    for (const [recipeID, cookingInfo] of Object.entries(cookingActivities[uid])) {
        const recipe = Object.values(RECIPES).find(r => r.name.toLowerCase().replace(/\s/g, '_') === recipeID);
        if (recipe && now >= cookingInfo.finishTime) {
            console.log(`[COOKING] Recipe ${recipe.name} finished for user ${uid}`);
            if (!inventory[uid][recipeID]) inventory[uid][recipeID] = 0;
            inventory[uid][recipeID]++;
            finishedRecipes.push(recipe);
            delete cookingActivities[uid][recipeID];

            // C·ªông EXP
            const expGain = recipe.exp;
            console.log(`[COOKING] User ${uid} gained ${expGain} EXP from cooking ${recipe.name}`);
            updateExpAndLevel(uid, expGain);
        } else if (recipe) {
            console.log(`[COOKING] Recipe ${recipe.name} still cooking for user ${uid}. Time left: ${formatTime(cookingInfo.finishTime - now)}`);
        }
    }

    if (finishedRecipes.length > 0) {
        await saveAllData();
        console.log(`[COOKING] Saved game data after finishing cooking for user ${uid}`);
    }

    return finishedRecipes;
}
// H√†m hi·ªÉn th·ªã th√¥ng tin trang tr·∫°i
function showField(api, event, uid) {
    console.log(`[FARM] Showing farm info for user ${uid}`);
    let fieldStatus = "üè° Trang tr·∫°i c·ªßa b·∫°n:\n---------------\n";

    // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√¢y tr·ªìng
    fieldStatus += "üå± C√¢y tr·ªìng:\n";
    for (let crop in plantSchema[uid]) {
        if (CROPS[crop]) {
            const plantedCrop = plantSchema[uid][crop];
            const timeLeft = plantedCrop.growTime - (Date.now() - plantedCrop.plantedTime);
            fieldStatus += `${CROPS[crop].emoji} ${CROPS[crop].name}: ${timeLeft > 0 ? formatTime(timeLeft) : "‚úÖ S·∫µn s√†ng thu ho·∫°ch!"}\n`;
        }
    }

    fieldStatus += "---------------\n";

    // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ƒë·ªông v·∫≠t
    fieldStatus += "üêæ ƒê·ªông v·∫≠t:\n";
    for (let animal in ANIMALS) {
        const timeLeft = ANIMALS[animal].feedTime - (Date.now() - (cooldowns[uid]?.[animal] || 0));
        fieldStatus += `${ANIMALS[animal].emoji} ${ANIMALS[animal].name}: ${timeLeft > 0 ? formatTime(timeLeft) : "üçΩÔ∏è C·∫ßn cho ƒÉn!"}\n`;
    }

    fieldStatus += "---------------\n";

    // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c m√≥n ƒëang n·∫•u
    fieldStatus += "üç≥ ƒêang n·∫•u:\n";
    if (cookingActivities[uid] && Object.keys(cookingActivities[uid]).length > 0) {
        for (let recipeID in cookingActivities[uid]) {
            const recipe = Object.values(RECIPES).find(r => r.name.toLowerCase().replace(/\s/g, '_') === recipeID);
            if (recipe) {
                const timeLeft = cookingActivities[uid][recipeID].finishTime - Date.now();
                if (timeLeft > 0) {
                    fieldStatus += `${recipe.emoji} ${recipe.name}: ${formatTime(timeLeft)}\n`;
                } else {
                    fieldStatus += `${recipe.emoji} ${recipe.name}: ‚úÖ ƒê√£ n·∫•u xong!\n`;
                }
            }
        }
    } else {
        fieldStatus += "Kh√¥ng c√≥ m√≥n ƒÉn n√†o ƒëang ƒë∆∞·ª£c n·∫•u.\n";
    }

    fieldStatus += "---------------\n";

    // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ level v√† exp
    const level = playerData[uid]?.level || 1;
    const exp = playerData[uid]?.exp || 0;
    const nextLevelExp = (level * level * 100);
    const progressToNextLevel = Math.floor((exp / nextLevelExp) * 100);

    fieldStatus += `üìä Level: ${level}\n`;
    fieldStatus += `üìà EXP: ${exp}/${nextLevelExp} (${progressToNextLevel}%)\n`;
    api.sendMessage(fieldStatus, event.threadID);
}

// H√†m hi·ªÉn th·ªã kho ƒë·ªì
async function showInventory(api, event, uid, Currencies) {
    if (!inventory[uid]) inventory[uid] = {};
    let inv = "üíº Kho c·ªßa b·∫°n:\n---------------\n";
    inv += "üåæ N√¥ng s·∫£n:\n";
    for (let item in inventory[uid]) {
        const cropInfo = CROPS[item];
        if (cropInfo) {
            inv += `${cropInfo.emoji} ${cropInfo.name}: ${inventory[uid][item]}\n`;
        }
    }
    inv += "---------------\n";
    inv += "ü•ö S·∫£n ph·∫©m ƒë·ªông v·∫≠t:\n";
    for (let item in inventory[uid]) {
        const animalInfo = Object.values(ANIMALS).find(animal => Object.keys(animal.products).includes(item));
        if (animalInfo) {
            const product = animalInfo.products[item];
            inv += `${product.emoji} ${product.name}: ${inventory[uid][item]}\n`;
        }
    }
    inv += "---------------\n";
    inv += "üç≥ M√≥n ƒÉn ƒë√£ n·∫•u:\n";
    for (let item in inventory[uid]) {
        const recipeInfo = Object.values(RECIPES).find(recipe => recipe.name.toLowerCase().replace(/\s/g, '_') === item);
        if (recipeInfo) {
            inv += `${recipeInfo.emoji} ${recipeInfo.name}: ${inventory[uid][item]}\n`;
        }
    }
    const userMoney = await Currencies.getData(uid);
    inv += `\nüí∞ S·ªë ti·ªÅn: ${userMoney.money.toLocaleString()} VND`;
    api.sendMessage(inv, event.threadID);
}
// H√†m b√°n t·∫•t c·∫£ v·∫≠t ph·∫©m
async function sellAllItems(api, event, uid, Currencies) {
    if (!inventory[uid] || Object.keys(inventory[uid]).length === 0) {
        return api.sendMessage("Kho c·ªßa b·∫°n tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ b√°n!", event.threadID);
    }

    let totalEarnings = 0;
    let soldItems = [];

    for (let itemKey in inventory[uid]) {
        const quantity = inventory[uid][itemKey];
        let item, price;

        if (CROPS[itemKey]) {
            item = CROPS[itemKey];
            price = item.price;
        } else if (RECIPES[itemKey]) {
            item = RECIPES[itemKey];
            price = item.price;
        } else {
            const animalProduct = Object.values(ANIMALS).find(animal => Object.keys(animal.products).includes(itemKey));
            if (animalProduct) {
                item = animalProduct.products[itemKey];
                price = item.price;
            }
        }

        if (item && price) {
            const earnings = price * quantity;
            totalEarnings += earnings;
            soldItems.push({
                name: item.name,
                emoji: item.emoji,
                quantity: quantity,
                earnings: earnings
            });
            delete inventory[uid][itemKey];
        }
    }

    if (soldItems.length === 0) {
        return api.sendMessage("Kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o c√≥ th·ªÉ b√°n!", event.threadID);
    }

    await Currencies.increaseMoney(uid, totalEarnings);
    await saveAllData();

    let message = "üéâ ƒê√£ b√°n t·∫•t c·∫£ v·∫≠t ph·∫©m trong kho:\n\n";
    for (let item of soldItems) {
        message += `${item.emoji} ${item.name}: ${item.quantity} c√°i - ${item.earnings} xu\n`;
    }
    message += `\nüí∞ T·ªïng thu: ${totalEarnings.toLocaleString()} VND`;

    const userMoney = await Currencies.getData(uid);
    message += `\nüíº S·ªë d∆∞ m·ªõi: ${userMoney.money.toLocaleString()} VND`;

    api.sendMessage(message, event.threadID);
}

// H√†m hi·ªÉn th·ªã th√¥ng tin level
function showLevelInfo(api, event, uid) {
    if (!playerData[uid]) {
        playerData[uid] = { exp: 0, level: 1 };
    }

    const level = playerData[uid].level;
    const exp = playerData[uid].exp;
    const nextLevelExp = (level * level * 100);
    const progressToNextLevel = Math.floor((exp / nextLevelExp) * 100);

    let infoMessage = `
üìä Th√¥ng tin Level c·ªßa b·∫°n:

üèÜ Level hi·ªán t·∫°i: ${level}
üìà EXP hi·ªán t·∫°i: ${exp}
üéØ EXP c·∫ßn ƒë·ªÉ l√™n level ti·∫øp theo: ${nextLevelExp}
üåü Ti·∫øn ƒë·ªô: ${progressToNextLevel}%

üí° M·∫πo: 
- Thu ho·∫°ch c√¢y tr·ªìng ƒë·ªÉ nh·∫≠n EXP. C√¢y tr·ªìng l√¢u h∆°n th∆∞·ªùng cho nhi·ªÅu EXP h∆°n.
- ChƒÉm s√≥c ƒë·ªông v·∫≠t th∆∞·ªùng xuy√™n. ƒê·ªông v·∫≠t l·ªõn h∆°n cho nhi·ªÅu EXP h∆°n m·ªói l·∫ßn cho ƒÉn.
- N·∫•u c√°c m√≥n ƒÉn ph·ª©c t·∫°p h∆°n ƒë·ªÉ nh·∫≠n nhi·ªÅu EXP h∆°n.
- C√¢n nh·∫Øc gi·ªØa th·ªùi gian ƒë·∫ßu t∆∞ v√† EXP nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ t·ªëi ∆∞u h√≥a vi·ªác n√¢ng c·∫•p.
    `;

    api.sendMessage(infoMessage, event.threadID);
}

// H√†m c·∫≠p nh·∫≠t EXP v√† level
function updateExpAndLevel(uid, expGain) {
    if (!playerData[uid]) {
        playerData[uid] = { exp: 0, level: 1 };
    }
    const oldLevel = playerData[uid].level;
    playerData[uid].exp += expGain;
    const newLevel = calculateLevel(playerData[uid].exp);
    let levelUpMessage = "";

    if (newLevel > oldLevel) {
        playerData[uid].level = newLevel;
        levelUpMessage = `\nüéä Ch√∫c m·ª´ng! B·∫°n ƒë√£ l√™n level ${newLevel}!`;
        return levelUpMessage;
    }
    return "";
}

// H√†m hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng
async function showLeaderboard(api, event, Users) {
    const sortedPlayers = Object.entries(playerData)
        .sort(([, a], [, b]) => b.exp - a.exp)
        .slice(0, 10); // L·∫•y top 10

    let leaderboardMsg = "üèÜ B·∫£ng X·∫øp H·∫°ng N√¥ng Tr·∫°i üèÜ\n\n";

    for (let i = 0; i < sortedPlayers.length; i++) {
        const [uid, data] = sortedPlayers[i];
        const name = await Users.getNameUser(uid);
        leaderboardMsg += `${i + 1}. ${name}\n   üí™ Level: ${data.level} | ‚ú® EXP: ${data.exp}\n`;
    }

    leaderboardMsg += "\nüí° G√µ 'farm level' ƒë·ªÉ xem th√¥ng tin chi ti·∫øt c·ªßa b·∫°n!";

    api.sendMessage(leaderboardMsg, event.threadID);
}

// H√†m hi·ªÉn th·ªã menu n·∫•u ƒÉn


module.exports.handleReply = async function({ api, event, Users, handleReply, Currencies }) {
    const { threadID, messageID, senderID, body } = event;
    
    if (handleReply.author != senderID) return api.sendMessage("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y", threadID, messageID);

    try {
        switch (handleReply.type) {
            case "farmMenu":
                const farmChoice = parseInt(body);
                if (isNaN(farmChoice) || farmChoice < 1 || farmChoice > 9) {
                    return api.sendMessage("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn 9.", threadID, messageID);
                }
                
                switch (farmChoice) {
                    case 1: // Tr·ªìng c√¢y
                        await plantAllCrops(api, event, senderID, Currencies);
                        break;
                    case 2: // Thu ho·∫°ch
                        await harvestAllCrops(api, event, senderID);
                        break;
                    case 3: // Cho ƒë·ªông v·∫≠t ƒÉn
                        await feedAllAnimals(api, event, senderID, Currencies);
                        break;
                    case 4: // N·∫•u ƒÉn
                        console.log(`[COOKING] Showing cooking menu to user ${senderID}`);
                        const recipes = Object.values(RECIPES);
                        let menuMsg = "üç≥ Menu n·∫•u ƒÉn:\n\n";
                        recipes.forEach((recipe, index) => {
                            menuMsg += `${index + 1}. ${recipe.emoji} ${recipe.name}\n`;
                        });
                        menuMsg += "\nReply v·ªõi s·ªë t∆∞∆°ng ·ª©ng v·ªõi m√≥n ƒÉn b·∫°n mu·ªën n·∫•u.";

                        return api.sendMessage(menuMsg, threadID, (error, info) => {
                            if (error) {
                                console.error('[ERROR] Error sending cooking menu:', error);
                                return;
                            }
                            console.log(`[COOKING] Cooking menu sent successfully to user ${senderID}`);
                            global.client.handleReply.push({
                                name: this.config.name,
                                messageID: info.messageID,
                                author: senderID,
                                type: "cookingMenu"
                            });
                        });
                    case 5: // Xem th√¥ng tin trang tr·∫°i
                        showField(api, event, senderID);
                        break;
                    case 6: // Xem kho ƒë·ªì
                        await showInventory(api, event, senderID, Currencies);
                        break;
                    case 7: // B√°n v·∫≠t ph·∫©m
                        await sellAllItems(api, event, senderID, Currencies);
                        break;
                    case 8: // Xem level
                        showLevelInfo(api, event, senderID);
                        break;
                    case 9: // Xem b·∫£ng x·∫øp h·∫°ng
                        await showLeaderboard(api, event, Users);
                        break;
                }
                break;
            case "cookingMenu":
                const recipeChoice = parseInt(body);
                const recipes = Object.values(RECIPES);
                if (isNaN(recipeChoice) || recipeChoice < 1 || recipeChoice > recipes.length) {
                    api.unsendMessage(handleReply.messageID); // Thu h·ªìi tin nh·∫Øn tr∆∞·ªõc ƒë√≥
                    return api.sendMessage(`‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn ${recipes.length}.`, threadID, messageID);
                }
                const selectedRecipe = recipes[recipeChoice - 1];
                if (!selectedRecipe) {
                    api.unsendMessage(handleReply.messageID); // Thu h·ªìi tin nh·∫Øn tr∆∞·ªõc ƒë√≥
                    return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c n·∫•u ƒÉn ƒë∆∞·ª£c ch·ªçn.", threadID, messageID);
                }
                
                api.unsendMessage(handleReply.messageID); // Thu h·ªìi tin nh·∫Øn tr∆∞·ªõc ƒë√≥
                
                return api.sendMessage(
                    `B·∫°n ƒë√£ ch·ªçn n·∫•u m√≥n ${selectedRecipe.emoji} ${selectedRecipe.name}.\nNguy√™n li·ªáu c·∫ßn c√≥:\n${Object.entries(selectedRecipe.ingredients).map(([ing, amount]) => `- ${CROPS[ing]?.name || ing}: ${amount}`).join('\n')}\n\nReply "ok" ƒë·ªÉ x√°c nh·∫≠n n·∫•u.`,
                    threadID,
                    (error, info) => {
                        global.client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "confirmCooking",
                            recipe: selectedRecipe
                        });
                    }
                );

            case "confirmCooking":
                if (body.toLowerCase() !== "ok") {
                    api.unsendMessage(handleReply.messageID); // Thu h·ªìi tin nh·∫Øn tr∆∞·ªõc ƒë√≥
                    return api.sendMessage("‚ùå ƒê√£ h·ªßy n·∫•u ƒÉn.", threadID, messageID);
                }
                
                const recipe = handleReply.recipe;
                // Ki·ªÉm tra nguy√™n li·ªáu
                for (const [ingredient, amount] of Object.entries(recipe.ingredients)) {
                    if (!inventory[senderID][ingredient] || inventory[senderID][ingredient] < amount) {
                        api.unsendMessage(handleReply.messageID); // Thu h·ªìi tin nh·∫Øn tr∆∞·ªõc ƒë√≥
                        return api.sendMessage(`‚ùå B·∫°n kh√¥ng ƒë·ªß ${CROPS[ingredient]?.name || ingredient} ƒë·ªÉ n·∫•u ${recipe.name}!`, threadID, messageID);
                    }
                }

                // Tr·ª´ nguy√™n li·ªáu
                for (const [ingredient, amount] of Object.entries(recipe.ingredients)) {
                    inventory[senderID][ingredient] -= amount;
                }

                // B·∫Øt ƒë·∫ßu n·∫•u
                if (!cookingActivities[senderID]) cookingActivities[senderID] = {};
                const recipeID = recipe.name.toLowerCase().replace(/\s/g, '_');
                cookingActivities[senderID][recipeID] = {
                    startTime: Date.now(),
                    finishTime: Date.now() + recipe.cookTime
                };

                try {
                    await saveAllData();
                } catch (error) {
              console.log('L·ªói n·∫•u ƒÉn');
                }

                api.unsendMessage(handleReply.messageID); // Thu h·ªìi tin nh·∫Øn tr∆∞·ªõc ƒë√≥
                return api.sendMessage(`üç≥ B·∫Øt ƒë·∫ßu n·∫•u ${recipe.emoji} ${recipe.name}. S·∫Ω ho√†n th√†nh sau ${formatTime(recipe.cookTime)}.`, threadID, messageID);

                                    
            default:
                console.log(`[ERROR] Unknown reply type: ${handleReply.type}`);
                api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω.", threadID, messageID);
        }
    } catch (error) {
        console.error('[ERROR] Error in handleReply:', error);
        api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói: ${error.message}`, threadID, messageID);
    }
};

module.exports.run = async function({ api, event, args, Currencies, Users }) {
    const { threadID, senderID, messageID } = event;
    const command = args[0];
    const uid = senderID;

    try {
        await loadAllData();

        // Reset s·ªë l·∫ßn gi√∫p ƒë·ª° m·ªói ng√†y
        const currentDate = new Date().toDateString();
        if (global.farmData.lastResetDate !== currentDate) {
            for (let uid in playerData) {
                playerData[uid].helpCount = {};
            }
            global.farmData.lastResetDate = currentDate;
            await saveAllData();
        }

        // Ki·ªÉm tra v√† ho√†n th√†nh c√°c m√≥n ƒÉn ƒëang n·∫•u
        const finishedRecipes = await checkAndFinishCooking(uid);
        if (finishedRecipes.length > 0) {
            let finishMessage = "üçΩÔ∏è C√°c m√≥n ƒÉn ƒë√£ ho√†n th√†nh:\n";
            for (const recipe of finishedRecipes) {
                finishMessage += `${recipe.emoji} ${recipe.name}\n`;
            }
            api.sendMessage(finishMessage, threadID);
        }

        if (!command) {
            // Hi·ªÉn th·ªã menu ch√≠nh
            const menu = `üåæ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Farm! B·∫°n mu·ªën l√†m g√¨?
1.üå± Tr·ªìng c√¢y
2. üåæ Thu ho·∫°ch
3. ‚öíÔ∏è Cho ƒë·ªông v·∫≠t ƒÉn
4. üßë‚Äçüç≥ N·∫•u ƒÉn
5. üßæ Xem th√¥ng tin trang tr·∫°i
6. üéí Xem kho ƒë·ªì
7. üí∏ B√°n v·∫≠t ph·∫©m
8. ‚úÖ Xem level
9. üîù Xem b·∫£ng x·∫øp h·∫°ng

üìå Reply s·ªë t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n.`;

            return api.sendMessage(menu, threadID, (error, info) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: senderID,
                    type: "farmMenu"
                });
            });
        }

        switch(command.toLowerCase()) {
            case "tr·ªìng":
                await plantAllCrops(api, event, uid, Currencies);
                break;
            case "thu ho·∫°ch":
            case "thuhoach":
                await harvestAllCrops(api, event, uid);
                break;
            case "cho ƒÉn":
            case "choan":
                await feedAllAnimals(api, event, uid, Currencies);
                break;
            case "n·∫•u ƒÉn":
            case "nauan":
                showCookingMenu(api, event, uid);
                break;
            case "info":
                showField(api, event, uid);
                break;
            case "kho":
                await showInventory(api, event, uid, Currencies);
                break;
            case "b√°n":
                await sellAllItems(api, event, uid, Currencies);
                break;
            case "level":
                showLevelInfo(api, event, uid);
                break;
            case "bxh":
                await showLeaderboard(api, event, Users);
                break;
            default:
                api.sendMessage("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng 'farm' ƒë·ªÉ xem danh s√°ch c√°c l·ªánh.", threadID, messageID);
        }

        await saveAllData();

    } catch (error) {
        console.error('L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω l·ªánh:', error);
        api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói: ${error.message}`, threadID);
    }
};