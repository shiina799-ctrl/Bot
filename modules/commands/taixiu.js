const fs = require('fs');
const path = require('path');
const axios = require("axios");

module.exports.config = {
  name: "taixiu",
  version: "1.7.0",
  hasPermssion: 0,
  credits: "DungUwU mod by Claude",
  description: "taixiu nhi·ªÅu ng∆∞·ªùi c√≥ ·∫£nh, l·ªãch s·ª≠ v√† n·ªï h≈©",
  commandCategory: "Game",
  usages: "[create/leave/start/info]",
  cooldowns: 60
};

let dice_images = [
"https://i.imgur.com/cmdORaJ.jpg",
"https://i.imgur.com/WNFbw4O.jpg",
"https://i.imgur.com/Xo6xIX2.jpg", 
"https://i.imgur.com/NJJjlRK.jpg",
"https://i.imgur.com/QLixtBe.jpg",
"https://i.imgur.com/y8gyJYG.jpg"
];

module.exports.run = async function({ api, event, args, Users, Threads, Currencies }) {
  const { threadID, messageID, senderID } = event;

  if (!global.client.taixiu_ca) global.client.taixiu_ca = {};
  
  const moneyUser = (await Currencies.getData(senderID)).money;
  const sendC = (msg, callback) => api.sendMessage(msg, threadID, callback, messageID);
  const send = (msg) => sendC(msg, () => {});
  const threadSetting = (await Threads.getData(String(threadID))).data || {};
  const prefix = threadSetting.hasOwnProperty("PREFIX") ? threadSetting.PREFIX : global.config.PREFIX;

  if (!args[0]) {
    return sendC(`üé≤ GAME L·∫ÆC T√ÄI X·ªàU üé≤\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${prefix}${this.config.name} create ‚Üí T·∫°o b√†n\n${prefix}${this.config.name} leave ‚Üí R·ªùi b√†n\n${prefix}${this.config.name} x·ªï ‚Üí B·∫Øt ƒë·∫ßu\n${prefix}${this.config.name} info ‚Üí Th√¥ng tin b√†n\n${prefix}${this.config.name} end ‚Üí K·∫øt th√∫c b√†n`);
  }

  const moneyBet = args[1]?.match(/\d+/)
    ? args[1].toLowerCase().replace(/k/g, "000").replace(/m/g, "000000").replace(/b/g, "000000000")
    : null;

  switch (args[0]) {
    case "create": {
      if (threadID in global.client.taixiu_ca) {
        if (!global.client.taixiu_ca[threadID].play) {
          if (global.client.taixiu_ca[threadID].id === senderID) {
            if (global.client.taixiu_ca[threadID].create === "false") {
              return sendC(
                "B√†n c≈© end ch∆∞a ƒë∆∞·ª£c 2p\nVui l√≤ng ch·ªù h·∫øt 2p h√£y t·∫°o b√†n m·ªõi\n\nB·∫°n c√≥ th·ªÉ th·∫£ ‚ù§Ô∏è tin nh·∫Øn n√†y ƒë·ªÉ d√πng 10% s·ªë ti·ªÅn ƒë·ªÉ t·∫°o b√†n nhanh (L∆∞u √Ω b·∫°n ph·∫£i c√≥ s·ªë d∆∞ tr√™n 1,000,000 VND)",
                (e, info) => {
                  global.client.handleReaction.push({
                    type: "create",
                    name: this.config.name,
                    author: senderID,
                    messageID: info.messageID,
                    moneyUser,
                  });
                }
              );
            }
          }
        }
        if (global.client.taixiu_ca[threadID].play) {
          return send("‚ùé ƒêang c√≥ 1 v√°n t√†i x·ªâu di·ªÖn ra ·ªü nh√≥m n√†y!");
        }
      }

      sendC("‚úÖ T·∫°o th√†nh c√¥ng b√†n t√†i x·ªâu!\n\nüìå ƒê·ªÉ tham gia c∆∞·ª£c, h√£y ghi: t√†i/x·ªâu + s·ªë ti·ªÅn c∆∞·ª£c\n\nüé≤ B√†n s·∫Ω t·ª± ƒë·ªông h·ªßy n·∫øu kh√¥ng ƒë∆∞·ª£c x·ªï trong 4 ph√∫t", () => {
        global.client.taixiu_ca[threadID] = {
          players: 0,
          data: {},
          play: true,
          status: "pending",
          author: senderID,
        };
      });

      setTimeout(async () => {
        if (!global.client.taixiu_ca[threadID]?.data) return;
        let total = 0;
        let msg = 'Th√¥ng tin';
        
        for (const id in global.client.taixiu_ca[threadID].data) {
          const name = await Users.getNameUser(id) || "Player";
          const playerBet = global.client.taixiu_ca[threadID].data[id].bet;
          await Currencies.increaseMoney(id, playerBet * 2);
          msg += `\nüë§ ${name}: ${playerBet * 2}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " VND";
          total += playerBet;
        }
        
        await Currencies.decreaseMoney(global.client.taixiu_ca[threadID].author, total);
        msg += "\n\nCh·ªß b√†n ƒë√£ b·ªã tr·ª´ " + total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " VND";
        api.sendMessage(msg, threadID);
        delete global.client.taixiu_ca[threadID];
      }, 240000);
      return;
    }

    case "leave": {
      if (!global.client.taixiu_ca[threadID]) 
        return send("‚ùé Nh√≥m c·ªßa b·∫°n kh√¥ng c√≥ v√°n t√†i x·ªâu n√†o ƒëang di·ªÖn ra!");
      
      if (!global.client.taixiu_ca[threadID].data[senderID])
        return send("‚ùé B·∫°n ch∆∞a tham gia t√†i x·ªâu ·ªü nh√≥m n√†y!");
      
      global.client.taixiu_ca[threadID].players--;
      const refundAmount = global.client.taixiu_ca[threadID].data[senderID].bet;
      await Currencies.increaseMoney(senderID, refundAmount);
      delete global.client.taixiu_ca[threadID].data[senderID];
      
      send(`‚úÖ ƒê√£ r·ªùi v√°n t√†i x·ªâu th√†nh c√¥ng!\nüí∏ Ho√†n ti·ªÅn: ${refundAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`);
      return;
    }

    case "end": {
      if (!global.client.taixiu_ca[threadID]?.author === senderID)
        return send("‚ùé B·∫°n kh√¥ng ph·∫£i ch·ªß ph√≤ng!");

      delete global.client.taixiu_ca[threadID];
      global.client.taixiu_ca[threadID] = { id: senderID, create: "false" };
      
      send("üèÅ ƒê√£ x√≥a b√†n th√†nh c√¥ng!");
      
      setTimeout(() => {
        global.client.taixiu_ca[threadID] = { create: true };
      }, 180000);
      break;
    }

    case "info": {
      if (!global.client.taixiu_ca[threadID])
        return send("‚ùé Nh√≥m c·ªßa b·∫°n kh√¥ng c√≥ v√°n t√†i x·ªâu n√†o ƒëang di·ªÖn ra!");
      
      if (global.client.taixiu_ca[threadID].players == 0)
        return send("‚ùé Hi·ªán kh√¥ng c√≥ ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c");

      const playerList = [];
      const authorName = await Users.getNameUser(global.client.taixiu_ca[threadID].author) || "Player";
      
      for (const id in global.client.taixiu_ca[threadID].data) {
        const name = await Users.getNameUser(id) || "Player";
        const player = global.client.taixiu_ca[threadID].data[id];
        playerList.push(`üë§ ${name}: ${player.name} - ${player.bet.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`);
      }

      send(`üìä [ TH√îNG TIN B√ÄN T√ÄI X·ªàU ]\nüëë Ch·ªß ph√≤ng: ${authorName}\n\nüë• Ng∆∞·ªùi tham gia:\n${playerList.join("\n")}`);
      return;
    }

    default: {
      return send(`‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: ${prefix}help ${this.config.name}`);
    }
  }
};

module.exports.handleEvent = async function ({ api, event, args, Currencies, Users }) {
  const { threadID, messageID, body, senderID } = event;
  if (!global.client.taixiu_ca?.[threadID]?.play) return;

  const moneyUser = (await Currencies.getData(senderID)).money;
  const sendC = (msg, callback) => api.sendMessage(msg, threadID, callback, messageID);
  const send = (msg) => sendC(msg, () => {});

  if (!body || typeof body !== 'string') return;

  const [command, betAmount] = body.toLowerCase().split(" ");
  if (!["t√†i", "tai", "x·ªâu", "xiu", "x·ªï", "xo"].includes(command)) return;

  let moneyBet = betAmount;
  if (betAmount?.toLowerCase() === "all") {
    moneyBet = moneyUser;
  } else {
    if (betAmount) {
      moneyBet = betAmount.toLowerCase()
        .replace(/k/g, "000")
        .replace(/m/g, "000000")
        .replace(/b/g, "000000000");
      moneyBet = parseInt(moneyBet);
      if (isNaN(moneyBet)) moneyBet = 0;
    }
  }

  switch (command) {
    case "t√†i":
    case "tai":
    case "x·ªâu": 
    case "xiu": {
      if (!global.client.taixiu_ca[threadID])
        return send("‚ùé Nh√≥m c·ªßa b·∫°n kh√¥ng c√≥ v√°n t√†i x·ªâu n√†o ƒëang di·ªÖn ra!");
      
      if (!moneyBet)
        return send("‚ùé Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c!");
        
      if (moneyBet <= 0)
        return send("‚ùé S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!");
        
      if (moneyBet > moneyUser)
        return send("‚ùé S·ªë ti·ªÅn c∆∞·ª£c l·ªõn h∆°n s·ªë d∆∞ c·ªßa b·∫°n!");
        
      if (moneyBet < 50)
        return send("‚ùé S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 50 VND!");

      if (global.client.taixiu_ca[threadID].status === "pending") {
        const betChoice = command;
        const formattedBet = moneyBet.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

        if (!global.client.taixiu_ca[threadID].data[senderID]) {
          global.client.taixiu_ca[threadID].players++;
        } else {
          return sendC(
            `B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c ${global.client.taixiu_ca[threadID].data[senderID].name}\nB·∫°n ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi th√†nh ${betChoice} v·ªõi s·ªë ti·ªÅn ${formattedBet} VND?\nTh·∫£ ‚ù§ ƒë·ªÉ x√°c nh·∫≠n`,
            (e, info) => {
              global.client.handleReaction.push({
                type: "confirm",
                name: this.config.name,
                author: senderID,
                messageID: info.messageID,
                betChoice,
                moneyBet,
              });
            }
          );
        }

        return sendC(
          `‚úÖ ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng ${formattedBet} VND v√†o ${betChoice} üé∞`,
          async () => {
            await Currencies.decreaseMoney(senderID, moneyBet);
            global.client.taixiu_ca[threadID].data[senderID] = {
              name: betChoice,
              bet: moneyBet
            };
          }
        );
      }
      return;
    }

    case "x·ªï":
    case "xo": {
      if (!global.client.taixiu_ca[threadID])
        return send("‚ùé Nh√≥m c·ªßa b·∫°n kh√¥ng c√≥ v√°n t√†i x·ªâu n√†o ƒëang di·ªÖn ra!");
        
      if (global.client.taixiu_ca[threadID].author != senderID)
        return send("‚ùé B·∫°n kh√¥ng ph·∫£i ch·ªß ph√≤ng!");
        
      if (global.client.taixiu_ca[threadID].players == 0)
        return send("‚ùé Ch∆∞a c√≥ ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c!");

      send("‚è≥ ƒêang l·∫Øc x√∫c x·∫Øc...");

      // Roll dice
      const rolls = [
        Math.ceil(Math.random() * 6),
        Math.ceil(Math.random() * 6),
        Math.ceil(Math.random() * 6)
      ];
      const totalDice = rolls.reduce((a, b) => a + b, 0);
      
      // Get dice images
      const diceImages = await Promise.all(
        rolls.map(roll => 
          axios.get(dice_images[roll - 1], { responseType: "stream" })
            .then(response => response.data)
        )
      );

      let msg = "üéâ K·∫æT QU·∫¢ T√ÄI X·ªàU üéâ";
      const gameResult = totalDice > 10 ? 't√†i' : 'x·ªâu';
      const tai = [], xiu = [], winners = [];
      
      // Load/initialize jackpot data
      const jackpotPath = path.join(__dirname, 'game', 'taixiu_jackpot.json');
      const historyPath = path.join(__dirname, 'game', 'taixiu_history.json');
      
      let jackpotInfo = { amount: 10000, lastWin: null };
      if (fs.existsSync(jackpotPath)) {
        jackpotInfo = JSON.parse(fs.readFileSync(jackpotPath, 'utf8'));
      }
      
      let history = [];
      if (fs.existsSync(historyPath)) {
        history = JSON.parse(fs.readFileSync(historyPath, 'utf8'));
      }

      const contributionInfo = [];
      const jackpotMessages = [];

      // Process bets and update balances
      for (const id in global.client.taixiu_ca[threadID].data) {
        const name = await Users.getNameUser(id);
        const player = global.client.taixiu_ca[threadID].data[id];const result = player.name;
        const bet = player.bet;
        const resultList = result === 't√†i' ? tai : xiu;

        if (result === gameResult) {
          // Ng∆∞·ªùi th·∫Øng
          const winAmount = Math.floor(bet * 1.97);
          await Currencies.increaseMoney(id, winAmount);
          resultList.push(`üë§ ${name}: +${winAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`);
          winners.push({ id, bet });

          // ƒê√≥ng g√≥p v√†o h≈© khi th·∫Øng (3%)
          const contribution = Math.floor(bet * 0.03);
          jackpotInfo.amount += contribution;
          contributionInfo.push(`üë§ ${name}: ${contribution.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`);
        } else {
          // Ng∆∞·ªùi thua
          resultList.push(`üë§ ${name}: -${bet.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`);
          jackpotInfo.amount += bet;
          contributionInfo.push(`üë§ ${name}: ${bet.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`);
        }
      }

      // Ki·ªÉm tra n·ªï h≈© (0.5%)
      if (Math.random() < 0.005 && winners.length > 0) {
        const totalBet = winners.reduce((sum, w) => sum + w.bet, 0);
        for (const winner of winners) {
          const proportion = winner.bet / totalBet;
          const jackpotWin = Math.floor(jackpotInfo.amount * proportion);
          await Currencies.increaseMoney(winner.id, jackpotWin);
          const winnerName = await Users.getNameUser(winner.id);
          jackpotMessages.push(`üèÜ ${winnerName}: +${jackpotWin.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`);
        }
        msg += `\n\nüéâüéâüéâ JACKPOT N·ªî! üéâüéâüéâ\n${jackpotMessages.join('\n')}`;
        jackpotInfo.lastWin = { 
          winners: jackpotMessages, 
          amount: jackpotInfo.amount, 
          time: new Date().toISOString() 
        };
        jackpotInfo.amount = 10000;
      }

      // C·∫≠p nh·∫≠t l·ªãch s·ª≠
      history.push(gameResult);
      if (history.length > 100) history.shift();

      // L∆∞u th√¥ng tin jackpot v√† l·ªãch s·ª≠
      fs.writeFileSync(jackpotPath, JSON.stringify(jackpotInfo, null, 2));
      fs.writeFileSync(historyPath, JSON.stringify(history, null, 2));

      const lastResults = history.slice(-9).map(result => result === 't√†i' ? '‚ö´' : '‚ö™').join(' ');

      msg += `\n\nüé≤ K·∫øt qu·∫£: ${gameResult.toUpperCase()} (${totalDice})\n`;
      msg += `üìä Phi√™n g·∫ßn ƒë√¢y:\n${lastResults}\n\n`;
      msg += `üí∞ [ NH·ªÆNG NG∆Ø·ªúI ƒê·∫∂T T√ÄI ]\n${tai.join("\n")}\n`;
      msg += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      msg += `üí∞ [ NH·ªÆNG NG∆Ø·ªúI ƒê·∫∂T X·ªàU ]\n${xiu.join("\n")}\n`;
      msg += `\nüèÜ Ti·ªÅn trong h≈© hi·ªán t·∫°i: ${jackpotInfo.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`;
      msg += `\nüí∞ ƒê√≥ng g√≥p v√†o h≈©:\n${contributionInfo.join('\n')}`;

      if (jackpotInfo.lastWin) {
        msg += `\nüéâ L·∫ßn n·ªï h≈© g·∫ßn nh·∫•t:\n${jackpotInfo.lastWin.winners.join('\n')}\nV√†o l√∫c: ${new Date(jackpotInfo.lastWin.time).toLocaleString()}`;
      }

      sendC(
        {
          body: msg,
          attachment: diceImages
        },
        () => {
          delete global.client.taixiu_ca[threadID];
          global.client.taixiu_ca[threadID] = {
            id: senderID,
            create: "false"
          };
          setTimeout(() => {
            global.client.taixiu_ca[threadID] = {
              create: true
            };
          }, 180000);
        }
      );
      return;
    }
  }
}

module.exports.handleReaction = async function({ api, event, handleReaction, Currencies, Users }) {
  const { threadID, userID, reaction } = event;
  if (reaction != "‚ù§") return;
  if (userID != handleReaction.author) return;

  const { senderID, messageID, moneyBet, betChoice } = handleReaction;
  const moneyUser = (await Currencies.getData(senderID)).money;

  if (moneyBet > moneyUser) 
    return api.sendMessage("S·ªë ti·ªÅn ƒë·∫∑t l·ªõn h∆°n s·ªë d∆∞!", threadID, messageID);

  await Currencies.decreaseMoney(senderID, moneyBet);
  global.client.taixiu_ca[threadID].data[senderID] = { 
    name: betChoice, 
    bet: moneyBet 
  };
  
  return api.sendMessage(
    `ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng!\nL·ª±a ch·ªçn: ${betChoice}\nS·ªë ti·ªÅn: ${moneyBet.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} VND`,
    threadID,
    messageID
  );
};