const fs = require('fs').promises;
const path = require('path');

const cc = 8; // T·ªâ l·ªá th√†nh c√¥ng c∆° b·∫£n
const maxLevelBonus = 30; // T·ª∑ l·ªá c·ªông th√™m t·ªëi ƒëa ·ªü c·∫•p ƒë·ªô cao nh·∫•t

module.exports.config = {
    name: "cuop",
    version: "1.5.1",
    hasPermssion: 0,
    usePrefix: false,
    credits: "Q.Huy (Enhanced by Gojo)",
    description: "C∆∞·ªõp ti·ªÅn t·ª´ ng∆∞·ªùi kh√°c v·ªõi nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã",
    commandCategory: "Game",
    usages: "@tag/reply | info | shop | buy <item>",
    cooldowns: 5
};

const items = {
    mask: { name: "M·∫∑t n·∫°", price: 5000, successRateIncrease: 3 },
    gun: { name: "S√∫ng", price: 10000, successRateIncrease: 5 },
    car: { name: "Xe tho√°t th√¢n", price: 20000, successRateIncrease: 7 }
};

const randomEvents = [
    { 
        name: "C·∫£nh s√°t tu·∫ßn tra",
        chance: 0.1,
        effect: (userData, stolenAmount) => {
            const fine = Math.floor(stolenAmount * 0.5);
            return `B·∫°n b·ªã c·∫£nh s√°t b·∫Øt g·∫∑p v√† ph·∫£i n·ªôp ph·∫°t ${fine}$!`;
        }
    },
    {
        name: "G·∫∑p si√™u tr·ªôm",
        chance: 0.05,
        effect: (userData) => {
            const expGain = 500;
            return `B·∫°n g·∫∑p m·ªôt si√™u tr·ªôm v√† h·ªçc ƒë∆∞·ª£c v√†i chi√™u m·ªõi! (+${expGain} EXP)`;
        }
    },
    {
        name: "T√¨m th·∫•y kho b√°u",
        chance: 0.03,
        effect: (userData) => {
            const treasureAmount = Math.floor(Math.random() * 10000) + 5000;
            return `B·∫°n t√¨nh c·ªù t√¨m th·∫•y m·ªôt kho b√°u nh·ªè v√† nh·∫≠n ƒë∆∞·ª£c ${treasureAmount}$!`;
        }
    }
];

function getTitle(level) {
    if (level < 5) return 'üî∞ T·∫≠p S·ª±';
    if (level < 10) return 'üéì C∆∞·ªõp C·∫•p 1';
    if (level < 15) return 'üéì C∆∞·ªõp C·∫•p 2';
    if (level < 20) return 'üéì C∆∞·ªõp C·∫•p 3';
    if (level < 25) return 'üèÖ C∆∞·ªõp Chuy√™n Nghi·ªáp';
    if (level < 30) return 'üíé ƒê·∫°o T·∫∑c';
    if (level < 35) return 'üíé ƒê·∫°o T·∫∑c L√£o Luy·ªán';
    if (level < 40) return 'üîÆ Si√™u Tr·ªôm';
    if (level < 45) return 'üîÆ Si√™u Tr·ªôm L√£o Luy·ªán';
    if (level < 50) return 'üéñÔ∏è Tr·ªôm Huy·ªÅn Tho·∫°i';
    if (level < 55) return 'üéñÔ∏è Tr·ªôm Th·∫ßn Tho·∫°i';
    if (level < 60) return 'üèÜ Th√°nh Tr·ªôm';
    if (level < 65) return 'üèÜ Vua Tr·ªôm';
    if (level < 70) return 'üëë Th·∫ßn Tr·ªôm';
    if (level < 75) return 'üëë Th·∫ßn Tr·ªôm L√£o Luy·ªán';
    if (level < 80) return 'üé≠ Th√°nh ƒê·∫°o Ch√≠ch';
    if (level < 85) return 'üé≠ Vua ƒê·∫°o Ch√≠ch';
    if (level < 90) return 'üé≠ Th·∫ßn ƒê·∫°o Ch√≠ch';
    if (level < 95) return 'üé∞ Huy·ªÅn Tho·∫°i ƒê·∫°o Ch√≠ch';
    if (level < 100) return 'üé∞ Ch√∫a T·ªÉ ƒê·∫°o Ch√≠ch';
    if (level < 105) return 'üé∞ Ch√∫a T·ªÉ ƒê·∫°o T·∫∑c';
    if (level < 110) return '‚öúÔ∏è B√° Ch·ªß Tr·ªôm C·∫Øp';
    if (level < 115) return '‚öúÔ∏è ƒê·ªá Nh·∫•t Tr·ªôm C·∫Øp';
    if (level < 120) return '‚öúÔ∏è ƒê·∫°i ƒê·ªá Nh·∫•t Tr·ªôm C·∫Øp';
    if (level < 125) return 'üåü Th√°nh Ho√†ng Tr·ªôm C·∫Øp';
    if (level < 130) return 'üåü Ma V∆∞∆°ng ƒê·∫°o Ch√≠ch';
    if (level < 135) return 'üåü Ma ƒê·∫ø ƒê·∫°o Ch√≠ch';
    if (level < 140) return 'üî± Thi√™n V∆∞∆°ng ƒê·∫°o T·∫∑c';
    if (level < 145) return 'üî± Thi√™n ƒê·∫ø ƒê·∫°o T·∫∑c';
    if (level < 150) return 'üíÄ H·∫Øc √Åm ƒê·∫°i ƒê·∫°o Ch√≠ch';
    if (level < 155) return 'üíÄ H·∫Øc √Åm ƒê·∫°i ƒê·∫°o T·∫∑c';
    if (level < 160) return 'üëø H·∫Øc √Åm Chi V∆∞∆°ng';
    if (level < 165) return 'üëø H·∫Øc √Åm Chi ƒê·∫ø';
    if (level < 170) return 'ü¶π‚Äç‚ôÇÔ∏è Si√™u C·∫•p ƒê·∫°i Tr·ªôm';
    if (level < 175) return 'ü¶π‚Äç‚ôÇÔ∏è V√¥ ƒê·ªãch ƒê·∫°i Tr·ªôm';
    if (level < 180) return '‚öîÔ∏è Tr·∫£m Tinh ƒê·∫°i ƒê·∫°o';
    if (level < 185) return '‚öîÔ∏è Ph√° Thi√™n ƒê·∫°i ƒê·∫°o';
    if (level < 190) return 'üí£ H·ªßy Di·ªát ƒê·∫°i ƒê·∫°o';
    if (level < 195) return 'üí£ S√°ng Th·∫ø ƒê·∫°i ƒê·∫°o';
    return 'üî• Ch√≠ T√¥n ƒê·ªôc T√¥n ƒê·∫°i Th√°nh';
}

const dataPath = path.join(__dirname, 'cuopData.json');

async function loadData() {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            // File doesn't exist, return an empty object
            return {};
        }
        throw error;
    }
}

async function saveData(data) {
    await fs.writeFile(dataPath, JSON.stringify(data, null, 2), 'utf8');
}

async function getUserData(userId) {
    const data = await loadData();
    if (!data[userId]) {
        data[userId] = { exp: 0, level: 1, inventory: {}, lastRob: 0, stolen: 0, successStreak: 0, failStreak: 0 };
        await saveData(data);
    }
    return data[userId];
}

async function updateUserData(userId, updateFunction) {
    const data = await loadData();
    data[userId] = updateFunction(data[userId] || { exp: 0, level: 1, inventory: {}, lastRob: 0, stolen: 0, successStreak: 0, failStreak: 0 });
    await saveData(data);
    return data[userId];
}

module.exports.run = async function({ api, event, args, Users, Currencies }) {
    const { threadID, messageID, senderID } = event;

    let userData = await getUserData(senderID);
    let userMoney = await Currencies.getData(senderID);
    if (!userMoney) await Currencies.setData(senderID, { money: 0 });

    if (args[0] === "info" || (args.length === 0 && event.type !== "message_reply")) {
    let mention = Object.keys(event.mentions)[0];
    if (event.type == "message_reply") {
        mention = event.messageReply.senderID;
    }

    if (!mention) {
        const name = await Users.getNameUser(senderID);
        const level = userData.level || 1;
        const exp = userData.exp || 0;
        const money = (await Currencies.getData(senderID)).money || 0;
        const stolen = userData.stolen || 0;
        const title = getTitle(level);
        const inventory = userData.inventory || {};

        let itemList = "C√°c v·∫≠t ph·∫©m ƒëang c√≥:\n";
        for (const [item, quantity] of Object.entries(inventory)) {
            if (quantity > 0) {
                itemList += `- ${items[item].name}: ${quantity}\n`;
            }
        }

        return api.sendMessage(
            `Th√¥ng tin c·ªßa b·∫°n:\n` +
            `- T√™n: ${name}\n` +
            `- Ti·ªÅn: ${money}$\n` +
            `- Kinh nghi·ªám: ${exp}\n` +
            `- C·∫•p ƒë·ªô: ${level}\n` +
            `- Danh hi·ªáu: "${title}"\n` +
            `- S·ªë ti·ªÅn ƒë√£ c∆∞·ªõp ƒë∆∞·ª£c: ${stolen}$\n\n` +
            itemList,
            threadID, messageID
        );
    } else {
        const targetData = await getUserData(mention);
        const name = await Users.getNameUser(mention);
        const level = targetData.level || 1;
        const exp = targetData.exp || 0;
        const money = (await Currencies.getData(mention)).money || 0;
        const stolen = targetData.stolen || 0;
        const title = getTitle(level);
        const inventory = targetData.inventory || {};

        let itemList = "C√°c v·∫≠t ph·∫©m ƒëang c√≥:\n";
        for (const [item, quantity] of Object.entries(inventory)) {
            if (quantity > 0) {
                itemList += `- ${items[item].name}: ${quantity}\n`;
            }
        }

        return api.sendMessage(
            `Th√¥ng tin c·ªßa ${name}:\n` +
            `- Ti·ªÅn: ${money}$\n` +
            `- Kinh nghi·ªám: ${exp}\n` +
            `- C·∫•p ƒë·ªô: ${level}\n` +
            `- Danh hi·ªáu: "${title}"\n` +
            `- S·ªë ti·ªÅn ƒë√£ b·ªã c∆∞·ªõp: ${stolen}$\n\n` +
            itemList,
            threadID, messageID
        );
    }
}

    if (args[0] === "shop") {
        let shopList = "C·ª≠a h√†ng v·∫≠t ph·∫©m:\n";
        for (const [item, data] of Object.entries(items)) {
            shopList += `- ${data.name}: ${data.price}$ (TƒÉng t·ªâ l·ªá th√†nh c√¥ng ${data.successRateIncrease}%)\n`;
        }
        shopList += "\nƒê·ªÉ mua v·∫≠t ph·∫©m, s·ª≠ d·ª•ng l·ªánh: cuop buy <t√™n v·∫≠t ph·∫©m>";
        return api.sendMessage(shopList, threadID, messageID);
    }

    if (args[0] === "buy") {
        const itemName = args.slice(1).join(" ").toLowerCase();
        const item = Object.entries(items).find(([key, value]) => value.name.toLowerCase() === itemName);
        if (!item) {
            return api.sendMessage("V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i trong c·ª≠a h√†ng!", threadID, messageID);
        }
        const [itemKey, itemData] = item;
        const userMoney = (await Currencies.getData(senderID)).money;
        if (userMoney < itemData.price) {
            return api.sendMessage(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ${itemData.name}!`, threadID, messageID);
        }
        await Currencies.decreaseMoney(senderID, itemData.price);
        userData = await updateUserData(senderID, (data) => {
            data.inventory[itemKey] = (data.inventory[itemKey] || 0) + 1;
            return data;
        });
        return api.sendMessage(`B·∫°n ƒë√£ mua th√†nh c√¥ng ${itemData.name}!`, threadID, messageID);
    }

    let mention = Object.keys(event.mentions)[0];
    if (event.type == "message_reply") {
        mention = event.messageReply.senderID;
    }
    if (!mention) return api.sendMessage("Vui l√≤ng tag ho·∫∑c reply tin nh·∫Øn c·ªßa ng∆∞·ªùi b·∫°n mu·ªën c∆∞·ªõp!", threadID, messageID);

    const targetData = await getUserData(mention);
    const targetMoney = (await Currencies.getData(mention)).money;
    const name2 = await Users.getNameUser(mention);

    if (userMoney.money < 1000) {
        return api.sendMessage("B·∫°n c·∫ßn c√≥ √≠t nh·∫•t 1000$ ƒë·ªÉ c√≥ th·ªÉ c∆∞·ªõp ng∆∞·ªùi kh√°c!", threadID, messageID);
    }

    const cooldownTime = 5000; // 5 ph√∫t
    const lastRob = userData.lastRob || 0;
    const now = Date.now();
    if (now - lastRob < cooldownTime) {
        const timeLeft = Math.ceil((cooldownTime - (now - lastRob)) / 60000);
        return api.sendMessage(`B·∫°n v·ª´a c∆∞·ªõp g·∫ßn ƒë√¢y. Vui l√≤ng ƒë·ª£i ${timeLeft} ph√∫t n·ªØa.`, threadID, messageID);
    }

    let successRate = cc + Math.min((userData.level || 1) * 0.5, maxLevelBonus); // Gi·ªõi h·∫°n t·ª∑ l·ªá c·ªông th√™m ·ªü 30%
    const inventory = userData.inventory || {};
    for (const [item, quantity] of Object.entries(inventory)) {
        if (quantity > 0) {
            successRate += items[item].successRateIncrease;
        }
    }

    const tile = Math.floor(Math.random() * 100) + 1;

    if (tile <= successRate) {
        const minSteal = Math.ceil(targetMoney * 0.01); // √çt nh·∫•t 1% ti·ªÅn
        const maxSteal = Math.floor(targetMoney * 0.1); // T·ªëi ƒëa 10% ti·ªÅn
        const stolenAmount = Math.floor(Math.random() * (maxSteal - minSteal + 1)) + minSteal;

        await Currencies.increaseMoney(senderID, stolenAmount);
        await Currencies.decreaseMoney(mention, stolenAmount);
        
        userData = await updateUserData(senderID, (data) => {
            data.exp += stolenAmount * 0.1; // Gi·∫£m exp nh·∫≠n ƒë∆∞·ª£c
            data.stolen += stolenAmount;
            data.successStreak = (data.successStreak || 0) + 1;
            data.failStreak = 0;
            data.lastRob = now;
            return data;
        });

        let message = `B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng ${stolenAmount}$ c·ªßa ${name2} ‚ï∞(‚ñî‚àÄ‚ñî)‚ïØ`;

        if (userData.exp >= userData.level * 1000) {
            userData = await updateUserData(senderID, (data) => {
                data.level += 1;
                data.exp = 0;
                return data;
            });
            const title = getTitle(userData.level);
            api.sendMessage(`Ch√∫c m·ª´ng, b·∫°n ƒë√£ l√™n c·∫•p! C·∫•p ƒë·ªô hi·ªán t·∫°i c·ªßa b·∫°n l√† ${userData.level} v√† b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c danh hi·ªáu "${title}".`, threadID, messageID);
        }

        if (userData.successStreak % 5 === 0) {
            const bonus = userData.successStreak * 1000;
            await Currencies.increaseMoney(senderID, bonus);
            api.sendMessage(`Ch√∫c m·ª´ng, b·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng ${userData.successStreak} l·∫ßn li√™n ti·∫øp! B·∫°n nh·∫≠n ƒë∆∞·ª£c th∆∞·ªüng ${bonus}$!`, threadID, messageID);
        }

        // Random event
        for (const event of randomEvents) {
            if (Math.random() < event.chance) {
                const eventMessage = event.effect(userData, stolenAmount);
                message += '\n' + eventMessage;
                if (event.name === "C·∫£nh s√°t tu·∫ßn tra") {
                    const fine = Math.floor(stolenAmount * 0.5);
                    await Currencies.decreaseMoney(senderID, fine);
                } else if (event.name === "T√¨m th·∫•y kho b√°u") {
                    const treasureAmount = Math.floor(Math.random() * 10000) + 5000;
                    await Currencies.increaseMoney(senderID, treasureAmount);
                }
                break;
            }
        }

        return api.sendMessage(message, threadID, messageID);
    } else {
        const maxLoss = Math.floor(userMoney.money * 0.15); // TƒÉng t·ª∑ l·ªá m·∫•t ti·ªÅn l√™n 15%
        const lostAmount = Math.max(1, Math.floor(Math.random() * maxLoss) + 1);

        await Currencies.decreaseMoney(senderID, lostAmount);
        await Currencies.increaseMoney(mention, lostAmount);
        
        userData = await updateUserData(senderID, (data) => {
            data.failStreak = (data.failStreak || 0) + 1;
            data.successStreak = 0;
            data.lastRob = now;
            return data;
        });

        if (userData.failStreak % 3 === 0) {
            const penalty = userData.failStreak * 1000; // TƒÉng ti·ªÅn ph·∫°t l√™n 1000$ m·ªói 3 l·∫ßn th·∫•t b·∫°i
            await Currencies.decreaseMoney(senderID, penalty);
            await Currencies.increaseMoney(mention, penalty); // Ng∆∞·ªùi b·ªã c∆∞·ªõp nh·∫≠n ƒë∆∞·ª£c s·ªë ti·ªÅn ph·∫°t
            api.sendMessage(`R·∫•t ti·∫øc, b·∫°n ƒë√£ th·∫•t b·∫°i trong vi·ªác c∆∞·ªõp ${userData.failStreak} l·∫ßn li√™n ti·∫øp! B·∫°n b·ªã ph·∫°t ${penalty}$ v√† s·ªë ti·ªÅn n√†y ƒë∆∞·ª£c chuy·ªÉn cho ${name2}!`, threadID, messageID);
        }

        // X·ª≠ l√Ω m·∫•t ƒë·ªì khi th·∫•t b·∫°i
        if (inventory && Object.keys(inventory).length > 0) {
            const itemsWithQuantity = Object.entries(inventory).filter(([_, quantity]) => quantity > 0);
            if (itemsWithQuantity.length > 0) {
                const [lostItem, quantity] = itemsWithQuantity[Math.floor(Math.random() * itemsWithQuantity.length)];
                userData = await updateUserData(senderID, (data) => {
                    data.inventory[lostItem] -= 1;
                    return data;
                });
                api.sendMessage(`B·∫°n ƒë√£ l√†m m·∫•t 1 ${items[lostItem].name} trong qu√° tr√¨nh c∆∞·ªõp!`, threadID, messageID);
            }
        }

        return api.sendMessage(`B·∫°n ƒë√£ c∆∞·ªõp ${name2} th·∫•t b·∫°i v√† m·∫•t ${lostAmount}$. S·ªë ti·ªÅn n√†y ƒë∆∞·ª£c chuy·ªÉn cho ${name2} ‡≤° Õú  ñ ‡≤°`, threadID, messageID);
    }
};