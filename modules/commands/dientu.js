const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
    name: "dientu",
    version: "1.8.0",
    hasPermssion: 0,
    credits: "Gojo Satoru thay cre l√†m ch√≥",
    description: "Tr√≤ ch∆°i ƒêi·ªÅn v√†o ch·ªó tr·ªëng.",
    commandCategory: "Game",
    usages: "[/add/bxh]",
    cooldowns: 5
};

const SENTENCES_FILE = path.join(__dirname, "game", "dientu", "sentences.json");
const LEADERBOARD_FILE = path.join(__dirname, "game", "dientu", "leaderboard.json");
const DEFAULT_SENTENCES = [
    "C√¥ng cha nh∆∞ n√∫i th√°i s∆°n nghƒ©a m·∫π nh∆∞ n∆∞·ªõc trong ngu·ªìn ch·∫£y ra",
    "C√≥ c√¥ng m√†i s·∫Øt c√≥ ng√†y n√™n kim",
    "M·ªôt con ng·ª±a ƒëau c·∫£ t√†u b·ªè c·ªè",
    "Ki·∫øn tha l√¢u c≈©ng m·ªèi c·∫≥ng",
    "H·ªçc th·∫ßy kh√¥ng t√†y h·ªçc b·∫°n",
    "ƒÇn qu·∫£ nh·ªõ k·∫ª tr·ªìng c√¢y",
    "U·ªëng n∆∞·ªõc nh·ªõ ngu·ªìn",
    "B·∫ßu ∆°i th∆∞∆°ng l·∫•y b√≠ c√πng, tuy r·∫±ng kh√°c gi·ªëng nh∆∞ng chung m·ªôt gi√†n",
    "G·∫ßn m·ª±c th√¨ ƒëen g·∫ßn ƒë√®n th√¨ ch√°y",
    "Kh√¥ng th·∫ßy ƒë·ªë m√†y l√†m n√™n"
];

let sentences = [];
let leaderboard = {};
loadData();

let gameData = {};

const TIME_THOIGIAN = 120000; 
const THUONG_GOC = 1000;
const BONUS_FACTOR = 100;
const IT_NHAT = 100;

function loadData() {
    try {
        sentences = fs.readJsonSync(SENTENCES_FILE);
    } catch (error) {
        sentences = DEFAULT_SENTENCES;
        saveSentences();
    }

    try {
        leaderboard = fs.readJsonSync(LEADERBOARD_FILE);
    } catch (error) {
        leaderboard = {};
        saveLeaderboard();
    }
}

function saveSentences() {
    fs.writeJsonSync(SENTENCES_FILE, sentences);
}

function saveLeaderboard() {
    fs.writeJsonSync(LEADERBOARD_FILE, leaderboard);
}

function chooseRandomSentence() {
    const sentence = sentences[Math.floor(Math.random() * sentences.length)];
    const words = sentence.split(' ');
    const hiddenWords = [];

    for (let i = 0; i < 2; i++) {
        let randomIndex;
        do {
            randomIndex = Math.floor(Math.random() * words.length);
        } while (hiddenWords.includes(words[randomIndex]));
        hiddenWords.push(words[randomIndex]);
        words[randomIndex] = '___';
    }

    const modifiedSentence = words.join(' ');
    return { sentence: modifiedSentence, answer: hiddenWords };
}

module.exports.handleEvent = async function({ api, event, Currencies }) {

    const { threadID, senderID, body } = event;

    if (senderID === api.getCurrentUserID()) return;

    if (!gameData[threadID]) return;

    const game = gameData[threadID];

    const userAnswer = body.toLowerCase();

    const correctAnswer = game.answer.map(word => word.toLowerCase());

    if (userAnswer === "end" || userAnswer === "quit") {

        api.sendMessage(

            `üéÆ Tr√≤ ch∆°i ƒë√£ k·∫øt th√∫c.\n` +

            `C√¢u tr·∫£ l·ªùi ƒë√∫ng l√†: ${game.answer.join(", ")}\n` +

            `C√¢u ƒë·∫ßy ƒë·ªß: ${game.sentence.replace(/___/g, () => game.answer.shift())}`,

            threadID

        );

        delete gameData[threadID];

        return;

    }

    if (correctAnswer.every(word => userAnswer.includes(word))) {

        const timeTaken = (Date.now() - game.startTime) / 1000;

        const timeBonus = Math.max(0, BONUS_FACTOR - Math.floor(timeTaken));

        const finalReward = Math.max(IT_NHAT, THUONG_GOC + timeBonus);

        try {

            await Currencies.increaseMoney(senderID, finalReward);

            const userData = await api.getUserInfo(senderID);

            const userName = userData[senderID].name;
            if (!leaderboard[senderID]) {
                leaderboard[senderID] = {
                    name: userName,
                    score: 0
                };
            }
            leaderboard[senderID].score += finalReward;
            saveLeaderboard();
            api.sendMessage(
                `üéâ Ch√∫c m·ª´ng! ${userName} ƒë√£ tr·∫£ l·ªùi ƒë√∫ng v√† nh·∫≠n ƒë∆∞·ª£c ${finalReward} ƒë·ªìng.\n` +
                `C√¢u ƒë·∫ßy ƒë·ªß: ${game.sentence.replace(/___/g, () => game.answer.shift())}`,
                threadID
            );
            delete gameData[threadID];
        } catch (error) {
            console.error("Error getting user info or increasing money:", error);
            api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c tƒÉng ti·ªÅn th∆∞·ªüng. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
        }
    } else {
        api.sendMessage(`‚ùå R·∫•t ti·∫øc, "${body}" kh√¥ng ph·∫£i l√† c√¢u tr·∫£ l·ªùi ƒë√∫ng. H√£y th·ª≠ l·∫°i!`, threadID);
    }
};
module.exports.run = async function({ api, event, args, permssion }) {
    const { threadID, senderID } = event;

    if (!args[0]) {
        if (gameData[threadID]) {
            return api.sendMessage("ƒê√£ c√≥ m·ªôt c√¢u h·ªèi ƒëang ch·ªù tr·∫£ l·ªùi trong nh√≥m n√†y.", threadID);
        }

        const { sentence, answer } = chooseRandomSentence();
        gameData[threadID] = {
            sentence,
            answer,
            startTime: Date.now()
        };

        api.sendMessage(
            `üéÆ Tr√≤ ch∆°i ƒêi·ªÅn v√†o ch·ªó tr·ªëng ƒë√£ b·∫Øt ƒë·∫ßu!\n\n` +
            `C√¢u h·ªèi: ${sentence}\n\n` +
            `H√£y chat tr·ª±c ti·∫øp c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n (g·ªìm 2 t·ª´ b·ªã ·∫©n c√°ch nhau b·ªüi d·∫•u ph·∫©y).`,
            threadID
        );

        setTimeout(() => {
            if (gameData[threadID]) {
                api.sendMessage(
                    `‚è± H·∫øt th·ªùi gian!\n` +
                    `C√¢u tr·∫£ l·ªùi ƒë√∫ng l√†: ${gameData[threadID].answer.join(", ")}\n` +
                    `C√¢u ƒë·∫ßy ƒë·ªß: ${gameData[threadID].sentence.replace(/___/g, (match, index) => gameData[threadID].answer[index])}`,
                    threadID
                );
                delete gameData[threadID];
            }
        }, TIME_THOIGIAN);

        return;
    }

    if (args[0] === "add") {
        if (event.senderID != 61568252515454) {
            return api.sendMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", threadID);
        }

        const newSentence = args.slice(1).join(" ");
        if (newSentence.length < 10) {
            return api.sendMessage("C√¢u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±.", threadID);
        }
        sentences.push(newSentence);
        saveSentences();
        return api.sendMessage("C√¢u m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch.", threadID);
    }

    if (args[0] === "bxh") {
        const sortedLeaderboard = Object.entries(leaderboard)
            .sort((a, b) => b[1].score - a[1].score)
            .slice(0, 10);

        if (sortedLeaderboard.length === 0) {
            return api.sendMessage("Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu b·∫£ng x·∫øp h·∫°ng.", threadID);
        }

        const leaderboardMessage = "üèÜ B·∫£ng x·∫øp h·∫°ng top 10:\n\n" +
            sortedLeaderboard.map(([userID, userData], index) => `${index + 1}. ${userData.name} - ${userData.score} ƒë·ªìng`).join("\n");

        return api.sendMessage(leaderboardMessage, threadID);
    }

    return api.sendMessage("L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng 'dientu' ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i, 'add' ƒë·ªÉ th√™m c√¢u m·ªõi (c·∫ßn quy·ªÅn admin) ho·∫∑c 'bxh' ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng.", threadID);
};