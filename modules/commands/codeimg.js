const axios = require('axios');
const fs = require('fs').promises;
const { exec } = require('child_process');
const path = require('path');
const FormData = require('form-data');

module.exports.config = {
    name: "codeimg",
    version: "2.2.0",
    hasPermssion: 0,
    credits: "Gpt",
    description: "T·∫°o h√¨nh ·∫£nh t·ª´ code ho·∫∑c file",
    commandCategory: "Ti·ªán √≠ch",
    usages: "",
    cooldowns: 5,
};

const TEMP_DIR = path.join(__dirname, 'temp');

async function ensureTempDir() {
    await fs.mkdir(TEMP_DIR, { recursive: true });
}

async function cleanupTempFiles(files) {
    for (const file of files) {
        try {
            await fs.unlink(file);
            console.log(`ƒê√£ x√≥a file t·∫°m: ${file}`);
        } catch (error) {
            console.error(`L·ªói khi x√≥a file t·∫°m ${file}: ${error.message}`);
        }
    }
}

async function uploadImageToCatbox(imagePath) {
    const form = new FormData();
    form.append('reqtype', 'fileupload');
    form.append('fileToUpload', await fs.readFile(imagePath), path.basename(imagePath));

    try {
        const response = await axios.post('https://catbox.moe/user/api.php', form, {
            headers: form.getHeaders()
        });
        return response.data; 
    } catch (error) {
        console.error('L·ªói khi t·∫£i ·∫£nh l√™n Catbox:', error);
        throw error;
    }
}

let streamURL = (url, ext = 'jpg') => axios.get(url, {
    responseType: 'stream',
}).then(res => (res.data.path = `tmp.${ext}`, res.data)).catch(e => null);

module.exports.handleReply = async function({ api, event, handleReply }) {
    if (event.senderID != handleReply.author) return;
    
    const { threadID, messageID, senderID } = event;
    
    try {
        if (handleReply.step === 1) {
            const choice = event.body.trim().toLowerCase();
            if (choice === '1') {
                api.sendMessage("üìÅ Vui l√≤ng nh·∫≠p t√™n file (bao g·ªìm ƒëu√¥i file) trong th∆∞ m·ª•c l·ªánh:", threadID, 
                    (error, info) => {
                        if (error) return console.error(error);
                        global.client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            step: 2,
                            isFile: true
                        });
                    }
                );
            } else if (choice === '2') {
                api.sendMessage("üíª Vui l√≤ng nh·∫≠p ng√¥n ng·ªØ l·∫≠p tr√¨nh (v√≠ d·ª•: javascript, python, java, ...):", threadID, 
                    (error, info) => {
                        if (error) return console.error(error);
                        global.client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            step: 2,
                            isFile: false
                        });
                    }
                );
            } else {
                api.sendMessage("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1 ho·∫∑c 2.", threadID);
            }
        } else if (handleReply.step === 2) {
            if (handleReply.isFile) {
                const originalFilePath = path.join(__dirname, event.body.trim());
                try {
                    await fs.access(originalFilePath);
                    const fileContent = await fs.readFile(originalFilePath, 'utf8');
                    const language = path.extname(originalFilePath).slice(1);
                    
                    await ensureTempDir();
                    const tempFilePath = path.join(TEMP_DIR, `temp_${threadID}_${Date.now()}.${language}`);
                    await fs.writeFile(tempFilePath, fileContent);
                    
                    await processImage(api, threadID, tempFilePath, language, [tempFilePath]);
                } catch (error) {
                    api.sendMessage(`‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file "${event.body}". L·ªói: ${error.message}`, threadID);
                }
            } else {
                const language = event.body.trim();
                api.sendMessage("üìù Vui l√≤ng reply tin nh·∫Øn n√†y v·ªõi code b·∫°n mu·ªën t·∫°o h√¨nh ·∫£nh.", threadID,
                    (error, info) => {
                        if (error) return console.error(error);
                        global.client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            step: 3,
                            language: language
                        });
                    }
                );
            }
        } else if (handleReply.step === 3) {
            const code = event.body;
            if (!code) {
                return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p code h·ª£p l·ªá.", threadID, messageID);
            }
            
            await ensureTempDir();
            const tempFile = path.join(TEMP_DIR, `temp_${threadID}_${Date.now()}.${handleReply.language}`);
            
            await fs.writeFile(tempFile, code);
            await processImage(api, threadID, tempFile, handleReply.language, [tempFile]);
        }
    } catch (error) {
        console.error(`L·ªói kh√¥ng mong ƒë·ª£i: ${error.message}`);
        api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong ƒë·ª£i. Vui l√≤ng th·ª≠ l·∫°i sau.`, threadID);
    }
};

async function processImage(api, threadID, filePath, language, tempFiles = []) {
    api.sendMessage("üñºÔ∏è ƒêang t·∫°o h√¨nh ·∫£nh, vui l√≤ng ƒë·ª£i...", threadID);

    exec(`npx carbon-now-cli "${filePath}" -l ${language}`, async (error, stdout, stderr) => {
        if (error) {
            await cleanupTempFiles(tempFiles);
            return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
        }

        const outputLines = stdout.split('\n');
        const imageLine = outputLines.find(line => line.includes('The file can be found here:'));
        if (!imageLine) {
            await cleanupTempFiles(tempFiles);
            return api.sendMessage("‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ file ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.", threadID);
        }

        const imagePath = imageLine.split(': ')[1].trim().replace(' üòå', '');
        
        try {
            await fs.access(imagePath);
            const imageUrl = await uploadImageToCatbox(imagePath);
            const stream = await streamURL(imageUrl, 'png');
            if (stream) {
                await new Promise((resolve, reject) => {
                    api.sendMessage(
                        {
                            body: "üéâ ƒê√¢y l√† h√¨nh ·∫£nh code c·ªßa b·∫°n:",
                            attachment: stream
                        },
                        threadID,
                        (err) => {
                            if (err) reject(err);
                            else resolve();
                        }
                    );
                });
            } else {
                api.sendMessage(`‚ùå Kh√¥ng th·ªÉ t·∫°o stream. ƒê√¢y l√† link ·∫£nh c·ªßa b·∫°n: ${imageUrl}`, threadID);
            }

            await cleanupTempFiles([...tempFiles, imagePath]);
        } catch (fsError) {
            console.error(`L·ªói x·ª≠ l√Ω file: ${fsError.message}`);
            api.sendMessage(`‚ùå Kh√¥ng th·ªÉ t·∫°o ho·∫∑c g·ª≠i h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.`, threadID);
            await cleanupTempFiles(tempFiles);
        }
    });
}

module.exports.run = async function({ api, event, args }) {
    const { threadID, senderID } = event;
    
    const message = `üñ•Ô∏è T·∫°o h√¨nh ·∫£nh t·ª´ code üé®

B·∫°n mu·ªën t·∫°o h√¨nh ·∫£nh b·∫±ng c√°ch n√†o?

1Ô∏è‚É£ Nh·∫≠p t√™n file c√≥ s·∫µn trong th∆∞ m·ª•c l·ªánh
2Ô∏è‚É£ G·ª≠i code tr·ª±c ti·∫øp

üëâ Reply tin nh·∫Øn n√†y v·ªõi s·ªë 1 ho·∫∑c 2 ƒë·ªÉ ch·ªçn.`;

    api.sendMessage(
        message,
        threadID,
        (error, info) => {
            if (error) {
                console.error("L·ªói khi g·ª≠i tin nh·∫Øn h∆∞·ªõng d·∫´n:", error);
                return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
            }
            global.client.handleReply.push({
                name: this.config.name,
                messageID: info.messageID,
                author: senderID,
                step: 1
            });
        }
    );
};