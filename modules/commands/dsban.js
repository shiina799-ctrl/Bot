const fs = require('fs-extra');
const path = require('path');
const filePath = path.join(__dirname, '../../modules/commands/data/commands-banned.json');

module.exports.config = {
  name: "dsban",
  version: "1.0.5",
  hasPermssion: 1,
  credits: "Gojo",
  description: "Xem danh s√°ch c√°c l·ªánh, ng∆∞·ªùi d√πng v√† nh√≥m b·ªã c·∫•m (c√≥ th√¥ng tin chi ti·∫øt)",
  commandCategory: "QTV",
  usages: "[all/cmd/user/thread] | Reply s·ªë th·ª© t·ª± ƒë·ªÉ g·ª° ƒë∆°n l·∫ª ho·∫∑c 'all' ƒë·ªÉ g·ª° t·∫•t c·∫£",
  cooldowns: 5
};

const getRoleName = (permission) => {
  switch (permission) {
    case 0: return "Th√†nh vi√™n";
    case 1: return "Qu·∫£n tr·ªã vi√™n";
    case 2: return "Admin bot";
    case 3: return "Admin t·ªëi cao";
    default: return "Kh√¥ng x√°c ƒë·ªãnh";
  }
};

module.exports.run = async ({ api, event, args, Users, Threads }) => {
  try {
    if (!fs.existsSync(filePath)) fs.writeFileSync(filePath, JSON.stringify({}, null, 4));
    let data = JSON.parse(fs.readFileSync(filePath));
    const threadID = event.threadID;
    const type = args[0]?.toLowerCase();

    if (!data[threadID]) return api.sendMessage("‚ö†Ô∏è Kh√¥ng c√≥ l·ªánh c·∫•m n√†o trong nh√≥m n√†y.", threadID);

    let msg = "";
    let index = 1;
    let banList = [];

    // L·∫•y th√¥ng tin thread t·ª´ Mirai
    const threadInfo = await Threads.getInfo(threadID);
    const isAdmin = threadInfo.adminIDs.includes(event.senderID);

    switch (type) {
      case "cmd":
        if (!data[threadID].cmds || data[threadID].cmds.length === 0) {
          return api.sendMessage("üìã Kh√¥ng c√≥ l·ªánh n√†o b·ªã c·∫•m trong nh√≥m n√†y.", threadID);
        }
        msg = "üìã DANH S√ÅCH L·ªÜNH B·ªä C·∫§M:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
        for (const cmd of data[threadID].cmds) {
          const authorInfo = await Users.getInfo(cmd.author);
          const authorName = authorInfo?.name || cmd.author;
          const authorRole = isAdmin ? "Qu·∫£n tr·ªã vi√™n" : "Th√†nh vi√™n";
          
          msg += `${index}. L·ªánh: ${cmd.cmd}\n`;
          msg += `üë§ Ng∆∞·ªùi c·∫•m: ${authorName}\n`;
          msg += `üíº Ch·ª©c v·ª•: ${authorRole}\n`;
          msg += `üìù L√Ω do: ${cmd.reason || "Kh√¥ng c√≥ l√Ω do"}\n`;
          msg += `‚è∞ Th·ªùi gian: ${cmd.time}\n`;
          msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
          
          banList.push({ type: 'cmd', data: cmd });
          index++;
        }
        msg += "\nReply 'all' ƒë·ªÉ g·ª° t·∫•t c·∫£ l·ªánh b·ªã c·∫•m";
        break;

      case "user":
        if (!data[threadID].users || Object.keys(data[threadID].users).length === 0) {
          return api.sendMessage("üë• Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o b·ªã c·∫•m trong nh√≥m n√†y.", threadID);
        }
        msg = "üë• DANH S√ÅCH NG∆Ø·ªúI D√ôNG B·ªä C·∫§M:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
        for (const user in data[threadID].users) {
          const banInfo = data[threadID].users[user];
          const authorInfo = await Users.getInfo(banInfo.author);
          const authorName = authorInfo?.name || banInfo.author;
          const authorRole = isAdmin ? "Qu·∫£n tr·ªã vi√™n" : "Th√†nh vi√™n";
          const bannedInfo = await Users.getInfo(user);
          const bannedName = bannedInfo?.name || user;
          
          msg += `${index}. Ng∆∞·ªùi d√πng: ${bannedName}\n`;
          msg += `üÜî ID: ${user}\n`;
          msg += `üë§ Ng∆∞·ªùi c·∫•m: ${authorName}\n`;
          msg += `üíº Ch·ª©c v·ª•: ${authorRole}\n`;
          msg += `üìù L√Ω do: ${banInfo.reason || "Kh√¥ng c√≥ l√Ω do"}\n`;
          msg += `‚è∞ Th·ªùi gian: ${banInfo.time}\n`;
          
          if (banInfo.cmds && banInfo.cmds.length > 0) {
            msg += "üö´ C√°c l·ªánh b·ªã c·∫•m:\n";
            for (const cmd of banInfo.cmds) {
              const cmdAuthorInfo = await Users.getInfo(cmd.author);
              msg += `  - ${cmd.cmd}\n`;
              msg += `    ‚Ä¢ B·ªüi: ${cmdAuthorInfo?.name || cmd.author}\n`;
              msg += `    ‚Ä¢ L√Ω do: ${cmd.reason || "Kh√¥ng c√≥ l√Ω do"}\n`;
              msg += `    ‚Ä¢ Th·ªùi gian: ${cmd.time}\n`;
            }
          }
          msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
          
          banList.push({ type: 'user', data: { user, ...banInfo } });
          index++;
        }
        msg += "\nReply 'all' ƒë·ªÉ g·ª° t·∫•t c·∫£ ng∆∞·ªùi d√πng b·ªã c·∫•m";
        break;

      case "thread":
        if (!data.threads || data.threads.length === 0) {
          return api.sendMessage("üí¨ Kh√¥ng c√≥ nh√≥m n√†o b·ªã c·∫•m.", threadID);
        }
        msg = "üí¨ DANH S√ÅCH NH√ìM B·ªä C·∫§M:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
        for (const thread of data.threads) {
          const threadData = await Threads.getInfo(thread);
          msg += `${index}. Nh√≥m: ${threadData?.threadName || thread}\n`;
          msg += `üÜî Thread ID: ${thread}\n`;
          if (data.threadInfo?.[thread]) {
            const banInfo = data.threadInfo[thread];
            const authorInfo = await Users.getInfo(banInfo.author);
            msg += `üë§ Ng∆∞·ªùi c·∫•m: ${authorInfo?.name || banInfo.author}\n`;
            msg += `üìù L√Ω do: ${banInfo.reason || "Kh√¥ng c√≥ l√Ω do"}\n`;
            msg += `‚è∞ Th·ªùi gian: ${banInfo.time}\n`;
          }
          msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
          banList.push({ type: 'thread', data: thread });
          index++;
        }
        msg += "\nReply 'all' ƒë·ªÉ g·ª° t·∫•t c·∫£ nh√≥m b·ªã c·∫•m";
        break;

      default:
        msg = "üìä T·ªîNG QUAN DANH S√ÅCH C·∫§M:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
        
        // Ph·∫ßn l·ªánh b·ªã c·∫•m
        msg += "üìã L·ªÜNH B·ªä C·∫§M:\n";
        if (data[threadID].cmds && data[threadID].cmds.length > 0) {
          msg += `S·ªë l∆∞·ª£ng: ${data[threadID].cmds.length} l·ªánh\n`;
          msg += "3 l·ªánh g·∫ßn ƒë√¢y nh·∫•t:\n";
          for (const cmd of data[threadID].cmds.slice(-3)) {
            const authorInfo = await Users.getInfo(cmd.author);
            msg += `‚Ä¢ ${cmd.cmd}\n`;
            msg += `  - B·ªüi: ${authorInfo?.name || cmd.author}\n`;
            msg += `  - L√Ω do: ${cmd.reason || "Kh√¥ng c√≥ l√Ω do"}\n`;
          }
          banList = banList.concat(data[threadID].cmds.map(cmd => ({ type: 'cmd', data: cmd })));
        } else {
          msg += "Kh√¥ng c√≥ l·ªánh n√†o b·ªã c·∫•m.\n";
        }
        msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

        // Ph·∫ßn ng∆∞·ªùi d√πng b·ªã c·∫•m
        msg += "\nüë• NG∆Ø·ªúI D√ôNG B·ªä C·∫§M:\n";
        const userCount = Object.keys(data[threadID].users || {}).length;
        if (userCount > 0) {
          msg += `S·ªë l∆∞·ª£ng: ${userCount} ng∆∞·ªùi d√πng\n`;
          msg += "3 ng∆∞·ªùi d√πng g·∫ßn ƒë√¢y nh·∫•t:\n";
          const recentUsers = Object.entries(data[threadID].users || {}).slice(-3);
          for (const [userID, userData] of recentUsers) {
            const bannedInfo = await Users.getInfo(userID);
            const authorInfo = await Users.getInfo(userData.author);
            msg += `‚Ä¢ ${bannedInfo?.name || userID}\n`;
            msg += `  - B·ªã c·∫•m b·ªüi: ${authorInfo?.name || userData.author}\n`;
            msg += `  - L√Ω do: ${userData.reason || "Kh√¥ng c√≥ l√Ω do"}\n`;
          }
          banList = banList.concat(Object.entries(data[threadID].users || {}).map(([user, userData]) => ({
            type: 'user',
            data: { user, ...userData }
          })));
        } else {
          msg += "Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o b·ªã c·∫•m.\n";
        }
        msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

        // Ph·∫ßn nh√≥m b·ªã c·∫•m
        msg += "\nüí¨ NH√ìM B·ªä C·∫§M:\n";
        if (data.threads && data.threads.length > 0) {
          msg += `S·ªë l∆∞·ª£ng: ${data.threads.length} nh√≥m\n`;
          msg += "3 nh√≥m g·∫ßn ƒë√¢y nh·∫•t:\n";
          for (const thread of data.threads.slice(-3)) {
            const threadData = await Threads.getInfo(thread);
            msg += `‚Ä¢ ${threadData?.threadName || thread}\n`;
            if (data.threadInfo?.[thread]) {
              const authorInfo = await Users.getInfo(data.threadInfo[thread].author);
              msg += `  - B·ªã c·∫•m b·ªüi: ${authorInfo?.name || data.threadInfo[thread].author}\n`;
              msg += `  - L√Ω do: ${data.threadInfo[thread].reason || "Kh√¥ng c√≥ l√Ω do"}\n`;
            }
          }
          banList = banList.concat(data.threads.map(thread => ({ type: 'thread', data: thread })));
        } else {
          msg += "Kh√¥ng c√≥ nh√≥m n√†o b·ªã c·∫•m.\n";
        }
        msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        msg += "\n‚û°Ô∏è S·ª≠ d·ª•ng:\n‚Ä¢ dsban cmd: xem chi ti·∫øt l·ªánh b·ªã c·∫•m\n‚Ä¢ dsban user: xem chi ti·∫øt ng∆∞·ªùi b·ªã c·∫•m\n‚Ä¢ dsban thread: xem chi ti·∫øt nh√≥m b·ªã c·∫•m";
        msg += "\n\nReply 'all' ƒë·ªÉ g·ª° t·∫•t c·∫£ c√°c m·ª•c b·ªã c·∫•m";
        break;
    }

    if (msg) {
      return api.sendMessage(msg, threadID, (err, info) => {
        if (err) return console.error(err);
        if (banList.length > 0) {
          global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: event.senderID,
            banList,
            threadID: event.threadID,
            type: type || 'all'
          });
        }
      });
    }
  } catch (error) {
    console.error(error);
    return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.", threadID);
  }
};
module.exports.handleReply = async ({ api, event, handleReply, Users, Threads }) => {
  try {
    const { banList, threadID, type } = handleReply;
    const reply = event.body.toLowerCase();

    // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
    const threadInfo = await Threads.getInfo(threadID);
    const isAdmin = threadInfo.adminIDs.includes(event.senderID);
    const permission = global.config.ADMINBOT.includes(event.senderID) ? 2 : isAdmin ? 1 : 0;
    
    if (permission < 1) {
      return api.sendMessage("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.", threadID);
    }

    // X·ª≠ l√Ω reply 'all'
    if (reply === 'all') {
      let data = JSON.parse(fs.readFileSync(filePath));
      let removedCount = {
        cmd: 0,
        user: 0,
        thread: 0
      };
      let removedItems = {
        cmd: [],
        user: [],
        thread: []
      };
      
      // L∆∞u th√¥ng tin c√°c m·ª•c b·ªã x√≥a tr∆∞·ªõc khi x√≥a
      if (type === 'cmd' || type === 'all') {
        if (data[threadID].cmds) {
          removedCount.cmd = data[threadID].cmds.length;
          removedItems.cmd = [...data[threadID].cmds];
          data[threadID].cmds = [];
        }
      }
      
      if (type === 'user' || type === 'all') {
        if (data[threadID].users) {
          removedCount.user = Object.keys(data[threadID].users).length;
          removedItems.user = Object.entries(data[threadID].users).map(([id, info]) => ({id, ...info}));
          data[threadID].users = {};
        }
      }
      
      if (type === 'thread' || type === 'all') {
        if (data.threads) {
          removedCount.thread = data.threads.length;
          removedItems.thread = [...data.threads];
          data.threads = [];
        }
      }

      fs.writeFileSync(filePath, JSON.stringify(data, null, 4));
      
      // T·∫°o th√¥ng b√°o chi ti·∫øt
      let msg = "‚úÖ ƒê√£ g·ª° b·ªè th√†nh c√¥ng:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
      
      if (type === 'all' || type === 'cmd') {
        if (removedItems.cmd.length > 0) {
          msg += "üìã C√°c l·ªánh ƒë√£ g·ª° c·∫•m:\n";
          for (const cmd of removedItems.cmd) {
            msg += `‚Ä¢ ${cmd.cmd}\n`;
          }
          msg += `\nT·ªïng c·ªông: ${removedCount.cmd} l·ªánh\n`;
          msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        }
      }
      
      if (type === 'all' || type === 'user') {
        if (removedItems.user.length > 0) {
          msg += "\nüë• C√°c ng∆∞·ªùi d√πng ƒë√£ g·ª° c·∫•m:\n";
          for (const user of removedItems.user) {
            const userName = await Users.getNameUser(user.id);
            msg += `‚Ä¢ ${userName} (${user.id})\n`;
          }
          msg += `\nT·ªïng c·ªông: ${removedCount.user} ng∆∞·ªùi d√πng\n`;
          msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        }
      }
      
      if (type === 'all' || type === 'thread') {
        if (removedItems.thread.length > 0) {
          msg += "\nüí¨ C√°c nh√≥m ƒë√£ g·ª° c·∫•m:\n";
          for (const threadId of removedItems.thread) {
            const threadData = await Threads.getInfo(threadId);
            msg += `‚Ä¢ ${threadData.threadName || threadId}\n`;
          }
          msg += `\nT·ªïng c·ªông: ${removedCount.thread} nh√≥m\n`;
          msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        }
      }
      
      // Th√™m th√¥ng tin ng∆∞·ªùi th·ª±c hi·ªán
      const authorName = await Users.getNameUser(event.senderID);
      const authorRole = permission === 2 ? "Admin Bot" : "Qu·∫£n tr·ªã vi√™n";
      msg += `\nüë§ Th·ª±c hi·ªán b·ªüi: ${authorName}\n`;
      msg += `üíº Ch·ª©c v·ª•: ${authorRole}\n`;
      msg += `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;
      
      return api.sendMessage(msg, threadID);
    }

    // X·ª≠ l√Ω reply s·ªë th·ª© t·ª±
    const index = parseInt(reply) - 1;
    if (isNaN(index) || index < 0 || index >= banList.length) {
      return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.", threadID);
    }

    const bannedItem = banList[index];
    let data = JSON.parse(fs.readFileSync(filePath));
    const authorName = await Users.getNameUser(event.senderID);
    const authorRole = permission === 2 ? "Admin Bot" : "Qu·∫£n tr·ªã vi√™n";
    let successMsg = "‚úÖ ƒê√£ g·ª° c·∫•m th√†nh c√¥ng:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

    switch (bannedItem.type) {
      case 'cmd': {
        const cmdName = bannedItem.data.cmd;
        data[threadID].cmds = data[threadID].cmds.filter(cmd => cmd.cmd !== cmdName);
        successMsg += `L·ªánh: ${cmdName}\n`;
        successMsg += `üìù L√Ω do ban ƒë·∫ßu: ${bannedItem.data.reason || "Kh√¥ng c√≥"}\n`;
        successMsg += `‚è∞ Th·ªùi gian ban ƒë·∫ßu: ${bannedItem.data.time}\n`;
        const originalBanner = await Users.getNameUser(bannedItem.data.author);
        successMsg += `üë§ Ng∆∞·ªùi c·∫•m ban ƒë·∫ßu: ${originalBanner}\n`;
        break;
      }
      case 'user': {
        const userID = bannedItem.data.user;
        const userName = await Users.getNameUser(userID);
        delete data[threadID].users[userID];
        successMsg += `Ng∆∞·ªùi d√πng: ${userName}\n`;
        successMsg += `üÜî ID: ${userID}\n`;
        successMsg += `üìù L√Ω do ban ƒë·∫ßu: ${bannedItem.data.reason || "Kh√¥ng c√≥"}\n`;
        successMsg += `‚è∞ Th·ªùi gian ban ƒë·∫ßu: ${bannedItem.data.time}\n`;
        const originalBanner = await Users.getNameUser(bannedItem.data.author);
        successMsg += `üë§ Ng∆∞·ªùi c·∫•m ban ƒë·∫ßu: ${originalBanner}\n`;
        break;
      }
      case 'thread': {
        const threadId = bannedItem.data;
        const threadInfo = await Threads.getInfo(threadId);
        data.threads = data.threads.filter(thread => thread !== threadId);
        successMsg += `Nh√≥m: ${threadInfo.threadName || threadId}\n`;
        successMsg += `üÜî Thread ID: ${threadId}\n`;
        if (data.threadInfo?.[threadId]) {
          successMsg += `üìù L√Ω do ban ƒë·∫ßu: ${data.threadInfo[threadId].reason || "Kh√¥ng c√≥"}\n`;
          successMsg += `‚è∞ Th·ªùi gian ban ƒë·∫ßu: ${data.threadInfo[threadId].time}\n`;
          const originalBanner = await Users.getNameUser(data.threadInfo[threadId].author);
          successMsg += `üë§ Ng∆∞·ªùi c·∫•m ban ƒë·∫ßu: ${originalBanner}\n`;
        }
        break;
      }
      default:
        return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi g·ª° c·∫•m.", threadID);
    }

    fs.writeFileSync(filePath, JSON.stringify(data, null, 4));

    // Th√™m th√¥ng tin v·ªÅ ng∆∞·ªùi th·ª±c hi·ªán g·ª° c·∫•m
    successMsg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
    successMsg += `\nüë§ G·ª° c·∫•m b·ªüi: ${authorName}\n`;
    successMsg += `üíº Ch·ª©c v·ª•: ${authorRole}\n`;
    successMsg += `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;

    return api.sendMessage(successMsg, threadID);

  } catch (error) {
    console.error(error);
    api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.", threadID);
  }
};